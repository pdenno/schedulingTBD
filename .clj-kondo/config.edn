;;; https://github.com/borkdude/clj-kondo/blob/master/doc/config.md

{:project-root-uri "file:///home/pdenno/Documents/git/schedulingTBD" ; ToDo: Fix this!

 :linters {;; unused-referred-var is about :refer. https://github.com/clj-kondo/clj-kondo/blob/master/doc/linters.md#unused-referred-var
           :unused-referred-var {:exclude {taoensso.timbre [error debug info log]
                                           clojure.test    [deftest is testing]}}

           ;; https://github.com/clj-kondo/clj-kondo/blob/master/doc/linters.md#unresolved-var
           ;; New versions of datahike don't actually have forms for these functions and macros.
           ;; But there is lots of clojure.spec in DH, so many things will be caught at runtime.
           ;; ajax.core has similar problems.
           :unresolved-var      {:exclude [datahike.api ajax.core]}
           :unused-pubic-var    {:exclude-when-contains-meta #{:diag}}

           ;; :exclude-patterns is for bindings, not vars. See https://github.com/clj-kondo/clj-kondo/blob/master/doc/linters.md
           #_#_:unused-binding {:exclude-patterns ["^recreate.*" "^unknown-projects" "^backup.*"]}

           ;;------------ Some clojure-lsp things ---------------

           ;; https://clojure-lsp.io/settings/#clojure-lspunused-public-var
           :clojure-lsp/unused-public-var {:level :warning
                                           :exclude #{scheduling-tbd.db/backup-proj-dbs    ; These are things that can be called by the developer.
                                                      scheduling-tbd.db/backup-system-db   ; I suppose another way to do this is just put ^:diag on them.
                                                      scheduling-tbd.db/proj-base-cfg      ; But, as indicated below, ^:diag isn't working.
                                                      scheduling-tbd.db/delete-project
                                                      scheduling-tbd.db/recreate-dbs!
                                                      scheduling-tbd.db/unknown-projects}
                                           :exclude-when-contains-meta #{:diag}}} ; This doesn't seem to be working! (It was at one time?)


 ;; Gist for defstate: https://gist.github.com/ethpran/e1741a5c408aec831b5e3a7e24f40fea
 :hooks   {:analyze-call {mount.core/defstate hooks.defstate/defstate}}


 ;; https://github.com/clj-kondo/clj-kondo/blob/master/doc/config.md#lint-a-custom-macro-like-a-built-in-macro --- Use defn, not defmacro.
 :lint-as {;https://andersmurphy.com/2024/01/03/clojure-clj-kondo-datalog-linting.html
           applied-science.js-interop/defn           clojure.core/defn
           datahike.api/q                            datascript.core/q
           scheduling-tbd.operators/defoperator      clojure.core/defmethod              ; Suddenly, nothing works for these.
           scheduling-tbd.operators/defaction        clj-kondo-list-as/def-catch-all     ; Suddenly, nothing works for these.
           mount.core/defstate                       clj-kondo.lint-as/def-catch-all}}   ; Because the hook is not working!

;;; Hooks are used for macros for which :lint-as doesn't work. Currently mine for defstate doesn't work at all!
;;; 2024-04-23: Now I'm trying to put the mount/defstate stuff in its own directory and copy ns setup from other examples. No help.
