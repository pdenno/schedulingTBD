(def zeno-from-db
  '(defdomain ZENOTRAVEL
     ((:- (same ?x ?x))
      (:- (same ?x ?x))
      (:- (different ?x ?y) ((not (same ?x ?y))))
      (:- (different ?x ?y) ((not (same ?x ?y))))
      (:- (possible-person-in ?city)
          ((person ?p)
           (at ?p ?city)
           (goal ?p ?city2)
           (different ?city2 ?city)))
      (:- (possible-person-in ?city) ((person ?p) (at ?p ?city) (goal ?p ?city2) (different ?city2 ?city)))
      (:operator
       (!!cost ?end)
       ((maxtime ?max) (assign ?newmax (eval (if (< ?max ?end) ?end ?max))))
       ((maxtime ?max))
       ((maxtime ?newmax))
       (- ?newmax ?max))
      (:operator
       (!!cost ?end)
       ((maxtime ?max) (assign ?newmax (eval (if (< ?max ?end) ?end ?max))))
       ((maxtime ?max))
       ((maxtime ?newmax))
       (- ?newmax ?max))
      (:method (board ?p ?a ?c) ((write-time ?a ?start)) ())
      (:method (board ?p ?a ?c) ((write-time ?a ?start)) ())
      (:operator
       (!board ?p ?a ?c ?start ?duration)
       ((person ?p)
        (aircraft ?a)
        (city ?c)
        (at ?a ?c)
        (at ?p ?c)
        (onboard ?a ?num)
        (read-time ?a ?pmax)
        (assign ?new-num (+ ?num 1))
        (assign ?newpmax (max ?pmax (+ ?start ?duration 0.01))))
       ((onboard ?a ?num) (read-time ?a ?pmax) (at ?p ?c) (dest ?a ?c))
       ((onboard ?a ?new-num) (read-time ?a ?newpmax) (in ?p ?a))
       0.001)
      (:operator
       (!board ?p ?a ?c ?start ?duration)
       ((person ?p)
        (aircraft ?a)
        (city ?c)
        (at ?a ?c)
        (at ?p ?c)
        (onboard ?a ?num)
        (read-time ?a ?pmax)
        (assign ?new-num (+ ?num 1))
        (assign ?newpmax (max ?pmax (+ ?start ?duration 0.01))))
       ((onboard ?a ?num) (read-time ?a ?pmax) (at ?p ?c) (dest ?a ?c))
       ((onboard ?a ?new-num) (read-time ?a ?newpmax) (in ?p ?a))
       0.001)
      (:method (debark ?p ?a ?c) ((write-time ?a ?start)) ())
      (:method (debark ?p ?a ?c) ((write-time ?a ?start)) ())
      (:operator
       (!debark ?p ?a ?c ?start ?duration)
       ((person ?p)
        (aircraft ?a)
        (city ?c)
        (at ?a ?c)
        (in ?p ?a)
        (onboard ?a ?num)
        (read-time ?a ?pmax)
        (assign ?new-num (- ?num 1))
        (assign ?newpmax (max ?pmax (+ ?start ?duration 0.01))))
       ((onboard ?a ?num) (read-time ?a ?pmax) (in ?p ?a) (dest ?a ?c))
       ((onboard ?a ?new-num) (read-time ?a ?newpmax) (at ?p ?c))
       0.001)
      (:operator
       (!debark ?p ?a ?c ?start ?duration)
       ((person ?p)
        (aircraft ?a)
        (city ?c)
        (at ?a ?c)
        (in ?p ?a)
        (onboard ?a ?num)
        (read-time ?a ?pmax)
        (assign ?new-num (- ?num 1))
        (assign ?newpmax (max ?pmax (+ ?start ?duration 0.01))))
       ((onboard ?a ?num) (read-time ?a ?pmax) (in ?p ?a) (dest ?a ?c))
       ((onboard ?a ?new-num) (read-time ?a ?newpmax) (at ?p ?c))
       0.001)
      (:method
       (refuel ?a ?c)
       ((write-time ?a ?start)
        (read-time ?a ?pmax)
        (capacity ?a ?cap)
        (fuel ?a ?fuel)
        (eval (> ?cap ?fuel))
        (assign ?duration 1)
        (assign ?end (+ ?start ?duration 0.01))
        (assign ?newpmax (max ?pmax ?end)))
       ())
      (:method
       (refuel ?a ?c)
       ((write-time ?a ?start)
        (read-time ?a ?pmax)
        (capacity ?a ?cap)
        (fuel ?a ?fuel)
        (eval (> ?cap ?fuel))
        (assign ?duration 1)
        (assign ?end (+ ?start ?duration 0.01))
        (assign ?newpmax (max ?pmax ?end)))
       ())
      (:operator
       (!refuel ?a ?c ?start ?duration)
       ((aircraft ?a) (city ?c) (at ?a ?c) (fuel ?a ?fuel) (capacity ?a ?cap))
       ((fuel ?a ?fuel))
       ((fuel ?a ?cap))
       0.001)
      (:operator
       (!refuel ?a ?c ?start ?duration)
       ((aircraft ?a) (city ?c) (at ?a ?c) (fuel ?a ?fuel) (capacity ?a ?cap))
       ((fuel ?a ?fuel))
       ((fuel ?a ?cap))
       0.001)
      (:method
       (zoom ?a ?c1 ?c2)
       ((write-time ?a ?astart)
        (read-time ?a ?pmax)
        (distance ?c1 ?c2 ?dist)
        (fuel ?a ?fuel)
        (fast-burn ?a ?burn)
        (eval (>= ?fuel (* ?dist ?burn)))
        (assign ?duration 1)
        (assign ?start (max ?pmax ?astart))
        (assign ?end (+ ?start ?duration 0.01)))
       ())
      (:method
       (zoom ?a ?c1 ?c2)
       ((write-time ?a ?astart)
        (read-time ?a ?pmax)
        (distance ?c1 ?c2 ?dist)
        (fuel ?a ?fuel)
        (fast-burn ?a ?burn)
        (eval (>= ?fuel (* ?dist ?burn)))
        (assign ?duration 1)
        (assign ?start (max ?pmax ?astart))
        (assign ?end (+ ?start ?duration 0.01)))
       ())
      (:operator
       (!zoom ?a ?c1 ?c2 ?start ?duration)
       ((aircraft ?a)
        (city ?c1)
        (city ?c2)
        (onboard ?a ?num)
        (zoom-limit ?a ?limit)
        (eval (<= ?num ?limit))
        (at ?a ?c1)
        (distance ?c1 ?c2 ?dist)
        (fast-burn ?a ?burn)
        (total-fuel-used ?total-fuel)
        (assign ?new-total (+ ?total-fuel (* ?dist ?burn)))
        (fuel ?a ?fuel)
        (assign ?new-fuel (- ?fuel (* ?dist ?burn))))
       ((at ?a ?c1) (total-fuel-used ?total-fuel) (fuel ?a ?fuel))
       ((at ?a ?c2) (total-fuel-used ?new-total) (fuel ?a ?new-fuel))
       0.001)
      (:operator
       (!zoom ?a ?c1 ?c2 ?start ?duration)
       ((aircraft ?a)
        (city ?c1)
        (city ?c2)
        (onboard ?a ?num)
        (zoom-limit ?a ?limit)
        (eval (<= ?num ?limit))
        (at ?a ?c1)
        (distance ?c1 ?c2 ?dist)
        (fast-burn ?a ?burn)
        (total-fuel-used ?total-fuel)
        (assign ?new-total (+ ?total-fuel (* ?dist ?burn)))
        (fuel ?a ?fuel)
        (assign ?new-fuel (- ?fuel (* ?dist ?burn))))
       ((at ?a ?c1) (total-fuel-used ?total-fuel) (fuel ?a ?fuel))
       ((at ?a ?c2) (total-fuel-used ?new-total) (fuel ?a ?new-fuel))
       0.001)
      (:method
       (fly ?a ?c1 ?c2)
       ((write-time ?a ?astart)
        (read-time ?a ?pmax)
        (distance ?c1 ?c2 ?dist)
        (fuel ?a ?fuel)
        (slow-burn ?a ?burn)
        (eval (>= ?fuel (* ?dist ?burn)))
        (assign ?duration 1)
        (assign ?start (max ?pmax ?astart))
        (assign ?end (+ ?start ?duration 0.01)))
       ())
      (:method
       (fly ?a ?c1 ?c2)
       ((write-time ?a ?astart)
        (read-time ?a ?pmax)
        (distance ?c1 ?c2 ?dist)
        (fuel ?a ?fuel)
        (slow-burn ?a ?burn)
        (eval (>= ?fuel (* ?dist ?burn)))
        (assign ?duration 1)
        (assign ?start (max ?pmax ?astart))
        (assign ?end (+ ?start ?duration 0.01)))
       ())
      (:operator
       (!fly ?a ?c1 ?c2 ?start ?duration)
       ((aircraft ?a)
        (city ?c1)
        (city ?c2)
        (at ?a ?c1)
        (distance ?c1 ?c2 ?dist)
        (slow-burn ?a ?burn)
        (total-fuel-used ?total-fuel)
        (assign ?new-total (+ ?total-fuel (* ?dist ?burn)))
        (fuel ?a ?fuel)
        (assign ?new-fuel (- ?fuel (* ?dist ?burn))))
       ((at ?a ?c1) (total-fuel-used ?total-fuel) (fuel ?a ?fuel))
       ((at ?a ?c2) (total-fuel-used ?new-total) (fuel ?a ?new-fuel))
       0.001)
      (:operator
       (!fly ?a ?c1 ?c2 ?start ?duration)
       ((aircraft ?a)
        (city ?c1)
        (city ?c2)
        (at ?a ?c1)
        (distance ?c1 ?c2 ?dist)
        (slow-burn ?a ?burn)
        (total-fuel-used ?total-fuel)
        (assign ?new-total (+ ?total-fuel (* ?dist ?burn)))
        (fuel ?a ?fuel)
        (assign ?new-fuel (- ?fuel (* ?dist ?burn))))
       ((at ?a ?c1) (total-fuel-used ?total-fuel) (fuel ?a ?fuel))
       ((at ?a ?c2) (total-fuel-used ?new-total) (fuel ?a ?new-fuel))
       0.001)
      (:operator
       (!!preprocessing ?problem-name)
       ((totaltime-coeff ?tc) (fuelused-coeff ?fc) (eval (setf *tc* ?tc)) (eval (setf *fc* ?fc)))
       ()
       ()
       0)
      (:operator
       (!!preprocessing ?problem-name)
       ((totaltime-coeff ?tc) (fuelused-coeff ?fc) (eval (setf *tc* ?tc)) (eval (setf *fc* ?fc)))
       ()
       ()
       0)
      (:operator (!!assert ?g) () () (?g) 0)
      (:operator (!!assert ?g) () () (?g) 0)
      (:operator (!!ra ?D ?A) () (?D) (?A) 0)
      (:operator (!!ra ?D ?A) () (?D) (?A) 0)
      (:method (transport-person ?p ?c) Case1 ((at ?p ?c) (at ?a ?c) (at ?a ?c) (at ?p ?c) (at ?a ?c) (at ?a ?c)) ())
      (:method (transport-person ?p ?c) Case1 ((at ?p ?c) (at ?a ?c) (at ?a ?c) (at ?p ?c) (at ?a ?c) (at ?a ?c)) ())
      (:method
       (transport-person ?p ?c2)
       Case2
       ((:sort-by ?num (>) ((at ?p ?c1) (at ?a ?c1) (aircraft ?a) (onboard ?a ?num)))
        (at ?a ?somecity)
        (:sort-by ?cost (<) ((at ?a ?somecity) (travel-cost-info ?a ?somecity ?c ?cost ?style)))
        (:sort-by ?num (>) ((at ?p ?c1) (at ?a ?c1) (aircraft ?a) (onboard ?a ?num)))
        (at ?a ?somecity)
        (:sort-by ?cost (<) ((at ?a ?somecity) (travel-cost-info ?a ?somecity ?c ?cost ?style))))
       ())
      (:method
       (transport-person ?p ?c2)
       Case2
       ((:sort-by ?num (>) ((at ?p ?c1) (at ?a ?c1) (aircraft ?a) (onboard ?a ?num)))
        (at ?a ?somecity)
        (:sort-by ?cost (<) ((at ?a ?somecity) (travel-cost-info ?a ?somecity ?c ?cost ?style)))
        (:sort-by ?num (>) ((at ?p ?c1) (at ?a ?c1) (aircraft ?a) (onboard ?a ?num)))
        (at ?a ?somecity)
        (:sort-by ?cost (<) ((at ?a ?somecity) (travel-cost-info ?a ?somecity ?c ?cost ?style))))
       ())
      (:method
       (transport-person ?p ?c2)
       Case3
       ((:sort-by
         ?cost
         (<)
         ((at ?p ?c1)
          (aircraft ?a)
          (at ?a ?c3)
          (different ?c1 ?c3)
          (forall (?c) ((dest ?a ?c)) ((same ?c ?c1)))
          (imply ((different ?c3 ?c1)) (not (possible-person-in ?c3)))
          (travel-cost-info ?a ?c3 ?c1 ?cost ?style)))
        (:sort-by
         ?cost
         (<)
         ((at ?p ?c1)
          (aircraft ?a)
          (at ?a ?c3)
          (different ?c1 ?c3)
          (forall (?c) ((dest ?a ?c)) ((same ?c ?c1)))
          (imply ((different ?c3 ?c1)) (not (possible-person-in ?c3)))
          (travel-cost-info ?a ?c3 ?c1 ?cost ?style))))
       ())
      (:method
       (transport-person ?p ?c2)
       Case3
       ((:sort-by
         ?cost
         (<)
         ((at ?p ?c1)
          (aircraft ?a)
          (at ?a ?c3)
          (different ?c1 ?c3)
          (forall (?c) ((dest ?a ?c)) ((same ?c ?c1)))
          (imply ((different ?c3 ?c1)) (not (possible-person-in ?c3)))
          (travel-cost-info ?a ?c3 ?c1 ?cost ?style)))
        (:sort-by
         ?cost
         (<)
         ((at ?p ?c1)
          (aircraft ?a)
          (at ?a ?c3)
          (different ?c1 ?c3)
          (forall (?c) ((dest ?a ?c)) ((same ?c ?c1)))
          (imply ((different ?c3 ?c1)) (not (possible-person-in ?c3)))
          (travel-cost-info ?a ?c3 ?c1 ?cost ?style))))
       ())
      (:method
       (upper-move-aircraft ?a ?c ?style)
       Case1
       ((at ?p ?c) (at ?a ?c) (at ?a ?c) (at ?p ?c) (at ?a ?c) (at ?a ?c))
       ()
       Case2
       ((:sort-by ?num (>) ((at ?p ?c1) (at ?a ?c1) (aircraft ?a) (onboard ?a ?num)))
        (at ?a ?somecity)
        (:sort-by ?cost (<) ((at ?a ?somecity) (travel-cost-info ?a ?somecity ?c ?cost ?style)))
        (:sort-by ?num (>) ((at ?p ?c1) (at ?a ?c1) (aircraft ?a) (onboard ?a ?num)))
        (at ?a ?somecity)
        (:sort-by ?cost (<) ((at ?a ?somecity) (travel-cost-info ?a ?somecity ?c ?cost ?style))))
       ())
      (:method
       (upper-move-aircraft ?a ?c ?style)
       Case1
       ((at ?p ?c) (at ?a ?c) (at ?a ?c) (at ?p ?c) (at ?a ?c) (at ?a ?c))
       ()
       Case2
       ((:sort-by ?num (>) ((at ?p ?c1) (at ?a ?c1) (aircraft ?a) (onboard ?a ?num)))
        (at ?a ?somecity)
        (:sort-by ?cost (<) ((at ?a ?somecity) (travel-cost-info ?a ?somecity ?c ?cost ?style)))
        (:sort-by ?num (>) ((at ?p ?c1) (at ?a ?c1) (aircraft ?a) (onboard ?a ?num)))
        (at ?a ?somecity)
        (:sort-by ?cost (<) ((at ?a ?somecity) (travel-cost-info ?a ?somecity ?c ?cost ?style))))
       ())
      (:method
       (upper-move-aircraft-no-style ?a ?c)
       Case1
       ((at ?p ?c) (at ?a ?c) (at ?a ?c) (at ?p ?c) (at ?a ?c) (at ?a ?c))
       ()
       Case2
       ((:sort-by ?num (>) ((at ?p ?c1) (at ?a ?c1) (aircraft ?a) (onboard ?a ?num)))
        (at ?a ?somecity)
        (:sort-by ?cost (<) ((at ?a ?somecity) (travel-cost-info ?a ?somecity ?c ?cost ?style)))
        (:sort-by ?num (>) ((at ?p ?c1) (at ?a ?c1) (aircraft ?a) (onboard ?a ?num)))
        (at ?a ?somecity)
        (:sort-by ?cost (<) ((at ?a ?somecity) (travel-cost-info ?a ?somecity ?c ?cost ?style))))
       ())
      (:method
       (upper-move-aircraft-no-style ?a ?c)
       Case1
       ((at ?p ?c) (at ?a ?c) (at ?a ?c) (at ?p ?c) (at ?a ?c) (at ?a ?c))
       ()
       Case2
       ((:sort-by ?num (>) ((at ?p ?c1) (at ?a ?c1) (aircraft ?a) (onboard ?a ?num)))
        (at ?a ?somecity)
        (:sort-by ?cost (<) ((at ?a ?somecity) (travel-cost-info ?a ?somecity ?c ?cost ?style)))
        (:sort-by ?num (>) ((at ?p ?c1) (at ?a ?c1) (aircraft ?a) (onboard ?a ?num)))
        (at ?a ?somecity)
        (:sort-by ?cost (<) ((at ?a ?somecity) (travel-cost-info ?a ?somecity ?c ?cost ?style))))
       ())
      (:-
       (travel-cost-info ?a ?from ?to ?cost slow)
       (CASE1
        ((capacity ?a ?cap)
         (distance ?from ?to ?dist)
         (slow-burn ?a ?burn)
         (eval (< ?cap (* ?dist ?burn)))
         (assign ?cost most-positive-fixnum)))
       (CASE2
        ((distance ?from ?to ?dist)
         (fuel ?a ?fuel)
         (slow-burn ?a ?burn)
         (eval (>= ?fuel (* ?dist ?burn)))
         (assign ?cost (float (/ (+ *tc* (* *fc* (* ?dist ?burn))) 1)))))
       (CASE3
        ((capacity ?a ?cap)
         (distance ?from ?to ?dist)
         (slow-burn ?a ?burn)
         (assign ?cost (float (/ (+ (* *tc* 2) (* *fc* (* ?dist ?burn))) 1))))))
      (:-
       (travel-cost-info ?a ?from ?to ?cost slow)
       (CASE1
        ((capacity ?a ?cap)
         (distance ?from ?to ?dist)
         (slow-burn ?a ?burn)
         (eval (< ?cap (* ?dist ?burn)))
         (assign ?cost most-positive-fixnum)))
       (CASE2
        ((distance ?from ?to ?dist)
         (fuel ?a ?fuel)
         (slow-burn ?a ?burn)
         (eval (>= ?fuel (* ?dist ?burn)))
         (assign ?cost (float (/ (+ *tc* (* *fc* (* ?dist ?burn))) 1)))))
       (CASE3
        ((capacity ?a ?cap)
         (distance ?from ?to ?dist)
         (slow-burn ?a ?burn)
         (assign ?cost (float (/ (+ (* *tc* 2) (* *fc* (* ?dist ?burn))) 1))))))
      (:-
       (travel-cost-info ?a ?from ?to ?cost fast)
       (CASE1
        ((capacity ?a ?cap)
         (distance ?from ?to ?dist)
         (fast-burn ?a ?burn)
         (eval (< ?cap (* ?dist ?burn)))
         (assign ?cost most-positive-fixnum)))
       (CASE2
        ((distance ?from ?to ?dist)
         (fuel ?a ?fuel)
         (zoom-limit ?a ?limit)
         (onboard ?a ?num)
         (eval (< ?num ?limit))
         (fast-burn ?a ?burn)
         (eval (>= ?fuel (* ?dist ?burn)))
         (assign ?cost (float (/ (+ *tc* (* *fc* (* ?dist ?burn))) 1)))))
       (CASE3
        ((capacity ?a ?cap)
         (distance ?from ?to ?dist)
         (fast-burn ?a ?burn)
         (zoom-limit ?a ?limit)
         (onboard ?a ?num)
         (eval (< ?num ?limit))
         (assign ?cost (float (/ (+ (* *tc* 2) (* *fc* (* ?dist ?burn))) 1))))))
      (:-
       (travel-cost-info ?a ?from ?to ?cost fast)
       (CASE1
        ((capacity ?a ?cap)
         (distance ?from ?to ?dist)
         (fast-burn ?a ?burn)
         (eval (< ?cap (* ?dist ?burn)))
         (assign ?cost most-positive-fixnum)))
       (CASE2
        ((distance ?from ?to ?dist)
         (fuel ?a ?fuel)
         (zoom-limit ?a ?limit)
         (onboard ?a ?num)
         (eval (< ?num ?limit))
         (fast-burn ?a ?burn)
         (eval (>= ?fuel (* ?dist ?burn)))
         (assign ?cost (float (/ (+ *tc* (* *fc* (* ?dist ?burn))) 1)))))
       (CASE3
        ((capacity ?a ?cap)
         (distance ?from ?to ?dist)
         (fast-burn ?a ?burn)
         (zoom-limit ?a ?limit)
         (onboard ?a ?num)
         (eval (< ?num ?limit))
         (assign ?cost (float (/ (+ (* *tc* 2) (* *fc* (* ?dist ?burn))) 1))))))
      (:method
       (move-aircraft ?a ?c1 ?c2 slow)
       ((fuel ?a ?fuel) (distance ?c1 ?c2 ?dist) (slow-burn ?a ?burn) (eval (> ?fuel (* ?dist ?burn))))
       ()
       ()
       ())
      (:method
       (move-aircraft ?a ?c1 ?c2 slow)
       ((fuel ?a ?fuel) (distance ?c1 ?c2 ?dist) (slow-burn ?a ?burn) (eval (> ?fuel (* ?dist ?burn))))
       ()
       ()
       ())
      (:method
       (move-aircraft ?a ?c1 ?c2 fast)
       ((fuel ?a ?fuel) (distance ?c1 ?c2 ?dist) (fast-burn ?a ?burn) (eval (> ?fuel (* ?dist ?burn))))
       ()
       ()
       ())
      (:method
       (move-aircraft ?a ?c1 ?c2 fast)
       ((fuel ?a ?fuel) (distance ?c1 ?c2 ?dist) (fast-burn ?a ?burn) (eval (> ?fuel (* ?dist ?burn))))
       ()
       ()
       ())
      (:method (transport-aircraft ?a ?c) ((not (no-use ?a))) ())
      (:method (transport-aircraft ?a ?c) ((not (no-use ?a))) ()))))
