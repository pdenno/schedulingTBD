[
#:system{:EADS
         [#:EADS{:budget-decrement 0.1,
                 :can-produce-visuals [:flow-shop/graph],
                 :id :process/flow-shop,
                 :msg-str
                 "{:message-type :EADS-INSTRUCTIONS, :budget-decrement 0.1, :interviewer-agent :process, :interview-objective \"This EADS assumes the interviewees' production processes are organized as a flow shop.\\nUse this EADS to learn about the interviewees' production processes, their interrelation, inputs, outputs, and duration.\\nWe use the information you gather to create functional flow block (FFB) diagrams of their processes that interviewees can review.\\nWe might learn through further discussion that they actually don't want to develop a scheduling system to schedule the flow-shop\\nFor example, they might have in mind scheduling machine maintenance, not production.\\nThis fact would not prevent us from pursuing knowledge of how the make product or deliver the service that is revealed through this interview.\\nKnowledge of the processes might prove useful later.\\nUnlike many EADS where we accumulate results from your DATA-STRUCTURE-REFINEMENT messages, we'd like you to do that; grow the DSR with each question.\", :EADS {:EADS-id :process/flow-shop, :exhausted? {:val true, :comment \"When you think you have all the key processes documented, including their 'inputs' 'outputs' 'resources' and 'durations', set this to true.\\nThe EADS example here is complete in that sense, so we set it to true.\\nYou don't need to include this until you are ready to set it to true.\"}, :process-id {:val \"pencil-manufacturing\", :comment \"This is the top-level process. You can name it as you see fit; don't ask the interviewees.\"}, :inputs {:val [\"graphite\" \"clay\" \"water\" \"cedar wood\" \"metal\" \"eraser material\" \"paint\"], :comment \"These are all the raw materials used to make the product. It is a collection of all the raw materials in subprocesses.\"}, :outputs {:val [{:item-id \"finished pencils\", :quantity {:units \"finished pencils\", :value-string \"100000\"}}], :comment \"inputs and outputs can either be simple strings like we used above, 'graphite', clay..., or objects like this, with an 'item-id' and 'quantity'.\\nUse disgression (mindful of the questioning budget) about where you ask for quantities. Start simple and pursue details were the budget allows.\"}, :resources {:val [\"extruder\" \"kiln\" \"milling machine\" \"glue applicator\" \"shaping machine\"], :comment \"Resources, unlike inputs, are durable and reusable. Do not ask about quantities of resources; that's a conversation for another interviewer.\"}, :duration {:val {:units \"hours\", :value-string \"4\"}, :comment \"We use a string for 'value-string' in case interviewees answer it something like 'it varies'\"}, :subprocesses [{:process-id \"graphite-core-production\", :inputs [\"graphite\" \"clay\" \"water\"], :outputs [{:item-id \"finished graphite rods\", :quantity {:units \"graphite cores\", :value-string \"100000\"}}], :resources [\"mixer\" \"extruder\" \"kiln\"], :subprocesses [{:process-id \"mix-graphite-and-clay\", :inputs [\"graphite\" \"clay\" \"water\"], :outputs [{:item-id \"graphite clay paste\", :quantity {:units \"liters\", :value-string \"100\"}}], :resources [\"mixer\"], :duration {:units \"hours\", :value-string \"1\"}, :subprocesses {:val [], :comment \"We use empty array val values to signify that we don't think there are any interesting subprocess from the standpoint of scheduling.\\nOf course, this could be updated later if subsequent discussion suggests we are wrong.\"}} {:process-id \"extrude-core\", :inputs [\"graphite clay paste\"], :outputs [{:item-id \"extruded graphite rods\", :quantity {:units \"extruded graphite core\", :value-string \"100000\"}}], :resources [\"extruder\"], :duration {:units \"minutes\", :value-string \"20\"}, :subprocesses []} {:process-id \"dry-and-bake-core\", :inputs [\"extruded graphite rods\"], :outputs [{:item-id \"finished graphite rods\", :quantity {:units \"extruded graphite core\", :value-string \"100000\"}}], :resources [\"kiln\"], :duration {:units \"hours\", :value-string \"2\"}, :subprocesses []}]} {:process-id \"wood-casing-production\", :inputs [\"cedar wood\"], :outputs [\"wood slats with grooves\"], :resources [\"milling machine\"], :subprocess-flow {:val \"individuals-from-batch\", :comment \"The string 'individuals-from-batch' means that it isn't necessary to wait for all the slats to be created;\\nyou can start 'cut-grooves-in-slats' as soon as the first slat is available.\"}, :duration {:val {:units \"hours\", :value-string \"2\"}, :comment \"Because 'individuals-from-batch', this process's duration is (roughly speaking) the same as maximum of the two subprocesses.\"}, :subprocesses [{:process-id \"mill-wood-slats\", :inputs [\"cedar wood\"], :outputs [\"milled wood slats\"], :resources [\"milling machine\"], :duration {:units \"hours\", :value-string \"2\"}, :subprocess-flow {:val :individuals-from-batch, :comment \"'subprocess-flow' is about whether a batch must move through production steps as a batch or, alternatively, individuals from the batch can move.\\nThe string value 'individuals-from-batch' here means that it isn't necessary to wait for all the slats to be created, the process 'cut-grooves-in-slats'\\ncan start as soon as the first slat is available.\"}, :subprocesses []} {:process-id \"cut-grooves-in-slats\", :inputs [\"milled wood slats\"], :outputs [\"wood slats with grooves\"], :resources [\"groove cutter\"], :duration {:units \"hours\", :value-string \"2\"}, :subprocesses []}]} {:process-id \"assemble\", :inputs {:val [{:item-id \"finished graphite rods\", :from \"graphite-core-production\"} {:item-id \"wood slats with grooves\", :from \"wood-casing-production\"} \"metal\" \"erasers\" \"paint\"], :comment \"The 'from' property names a process that must occur before a process that uses it as an input (e.g. this 'assembly' process).\\nThe 'from' property is essential to understanding process ordering and potential for concurrency.\"}, :outputs [\"finished pencil\"], :resources [\"glue applicator\" \"shaping machine\"], :subprocesses [{:process-id \"insert-core-into-slats\", :inputs [\"graphite core\" \"wood slats with grooves\"], :outputs [\"pencil blanks\"], :resources [\"glue applicator\"], :subprocesses []} {:process-id \"shape-and-paint-pencil\", :inputs [\"pencil blanks\" \"paint\"], :outputs [\"shaped and painted pencils\"], :resources [\"shaping machine\" \"painting station\"], :subprocesses []} {:process-id \"attach-eraser\", :optional? {:val true, :comment \"'optional?' means that the process does not occur for every product. Not every pencil has an eraser.\"}, :inputs [\"shaped and painted pencils\" \"metal\" \"erasers\"], :outputs [\"finished pencils\"], :resources [\"crimping tool\"], :subprocesses []}]}]}}"}
          #:EADS{:budget-decrement 0.05,
                 :id :process/scheduling-problem-type,
                 :msg-str
                 "{:message-type :EADS-INSTRUCTIONS, :interview-objective \"This is typically the EADS to use directly after 'process/warm-up-with-challenges';\\nit continues to discover the basic characteristics of the interviewees' scheduling problem.\\nMore specifically, the objective of this interview segment is to \\n   1) classify the principal method of scheduling that is most appropriate for the work they do, and\\n   2) make some basic observations about ancillary aspects of scheduling.\\n\", :EADS {:EADS-id :process/scheduling-problem-type, :principal-problem-type {:val :FLOW-SHOP-SCHEDULING-PROBLEM, :comment \"The value here should be the problem-type that best characterizes the problem and production system architecture.\\nIf the industrial domain is well-known, use your background knowledge to help make this choice.\\nThe  value you provide here must be one of the following:\\n\\n   1) FLOW-SHOP-SCHEDULING-PROBLEM: the problem of defining start times for jobs that, roughly speaking, all visit production resources in the same order.\\n      Choose flow shop whenever the process suggests that production resources are laid out to facilitate movement to the next resource.\\n   2) TIMETABLING-PROBLEM: the problem of assigning collections of resources to event time slots, ensuring that all the resources required for each event are available in its time slot.\\n   3) PROJECT-SCHEDULING-PROBLEM:  the problem of defining start and finish dates to all activities, deliverables, and milestones within an undertaking.\\n   4) JOB-SHOP-SCHEDULING-PROBLEM: the problem of scheduling jobs where the order in which the jobs visit machines or workstations may vary as determined by the job type.\\n   5) SINGLE-MACHINE-SCHEDULING-PROBLEM: the problem of choosing the sequence by which each of several jobs use the same resource or set of resources.\"}, :problem-components {:val [:FLOW-SHOP-SCHEDULING-PROBLEM :JOB-SHOP-SCHEDULING-PROBLEM], :comment \"This should be a list of problem-type values that include all the problem types that seem relevant given your conversation so far.\\nFor example, whereas in this example the principal-problem-type is a flow-shop, conversation suggests that work might queue for a task the presents a timetabling problem.\"}, :continuous? {:val false, :comment \"continuous? refers to whether or not, in the principle-problem-type, product flows continuously from one process to the next, as it does in, for example, production of many petroleum products.\\nThis might be apparent from the answers that determined the value of problem-type. If not, then you can ask.\"}, :cyclical? {:val false, :comment \"cyclical? refers to whether or not they seek a system that creates schedules that can be repeated in a pattern.\\nFor example, if the made the same collection of products in the same order each week, cylical? would be true.\"}}}"}
          #:EADS{:id :process/job-shop,
                 :msg-str
                 "{:message-type :EADS-INSTRUCTIONS, :interviewer-agent :process, :interview-objective \"These EADS-INSTRUCTIONS assumes the interviewees' production processes are organized as a job shop.\\nWe have two separate approaches to model job shop scheduling problems: in one of these, the jobs are classified to match a small (less than a dozen or so)\\ndifferent process plans; in the other, a process plans will need to be specified for each job.\\nThe purpose of these EADS-INSTRUCTIONS is only to determine which of these two subclasses of job shop models should be pursued.\\nOnce this is determined, the orchestrator will likely then choose either EADS 'process/job-shop--classifiable' or 'process/job-shop--unique-order' corresponding\\nrespectively to the two separate approaches just described.\", :EADS {:EADS-id :process/job-shop, :classifiable-jobs? {:val true, :comment \"This property is true only in the case that it seems reasonable to pre-classify jobs as corresponding to a small collection (a dozen or so) process plans.\\nIf, in contrast, it seems more reasonable for the the firm to define a (possibly unique) production process for each job, classifiable-jobs? should be false.\\nIt is reasonable to ask whether defining a process plan for each job is part of their workflow.\"}}}"}
          #:EADS{:id :process/job-shop--classifiable,
                 :msg-str
                 "{:message-type :EADS-INSTRUCTIONS, :interviewer-agent :process, :interview-objective \"These EADS-INSTRUCTIONS assumes that\\n  (1) the interviewees' production processes are organized as a job shop, and\\n  (2) each of the jobs they undertake can be classified as following one of a small set of process plans.\\nThe purpose of these EADS-INSTRUCTIONS are to describe these process plans.\\nThere are a few ways to go about this:\\n  *  One way is to describe a single encompassing flow-shop-like process where some tasks are optional for some jobs.\\n     In this arrangement, we'd expect information about what processes are optional to accompany each job.\\n     In this arrangement, it is not your responsibility to relate jobs to processes; just capture the processes.\\n\\n  *  A second way is to describe a collection of distinct flow-shop-like process plans, one of which applies to every job they will encounter.\\n     You would choose this if there are permutations in the ordering of tasks among the jobs.\\n     (You will see from the EADS data structure below, that it does not provide a way describe these permuatations, thus the proliferation of process plans.)\\n     (By the way, you are free to mark tasks as optional in this approach, just as you might in the single encompassing flow-shop-like process described in the previous bullet.)\\n     You would choose this approach if, for example, they make a few very different products (like, for example, t-shirts and running shoes).\\n     It is possible that if they do make a few very different products, that they actually are talking about scheduling multiple production lines!\\n     There is a boolean in the EADS, 'multiple-production-lines?' that you can set to true if you learn that they have in mind scheduling multiple flow-shop-like production lines;\\n     We'll deal with this problem later, in the resources interview.\\nNote that the data structures used to define processes in these EADS instructions are like the one in the process/flow-shop EADS instructions.\\nThe principal differences are that (1) this one allows for multiple job-level processes, and (2) this one has the multiple-production-lines? property described above.\", :EADS {:EADS-id :process/job-shop--classifiable, :multiple-production-lines? {:val false, :comment \"This property is true only in the case that you learn that they run multiple flow-shop-like production lines that each support distinct process flows \\nappropriate for only some jobs.\"}, :job-level-processes {:comment \"This is a list of flow-shop-like processes as described in the interview-objectives above.\\nThe list only has one job-level process in it, but in your interveiw you can define many as described in the interview-objectives.\", :val [{:process-id {:val \"pencil-manufacturing\", :comment \"This is the top-level process. You can name it as you see fit; don't ask the interviewees.\"}, :inputs {:val [\"graphite\" \"clay\" \"water\" \"cedar wood\" \"metal\" \"eraser material\" \"paint\"], :comment \"These are all the raw materials used to make the product. You can figure this out by looking at all the raw materials in the leaf processes.\"}, :outputs {:val [{:item-id \"finished pencils\", :quantity {:units \"finished pencils\", :value-string \"100000\"}}], :comment \"inputs and outputs can either be simple strings like we used above, 'graphite', clay..., or objects like this, with an 'item-id' and 'quantity'.\\nUse disgression (mindful of the questioning budget) about where you ask for quantities. Start simple and pursue details were the budget allows.\"}, :resources {:val [\"extruder\" \"kiln\" \"milling machine\" \"glue applicator\" \"shaping machine\"], :comment \"Resources, unlike inputs, are durable and reusable. Do not ask about quantities of resources; that's a conversation for another interviewer.\"}, :duration {:val {:units \"hours\", :value-string \"4\"}, :comment \"We use a string for 'value-string' in case interviewees answer it something like 'it varies'\"}, :subprocesses [{:process-id \"graphite-core-production\", :inputs [\"graphite\" \"clay\" \"water\"], :outputs [{:item-id \"graphite core\", :quantity {:units \"graphite cores\", :value-string \"100000\"}}], :resources [\"mixer\" \"extruder\" \"kiln\"], :subprocesses [{:process-id \"mix-graphite-and-clay\", :inputs [\"graphite\" \"clay\" \"water\"], :outputs [{:item-id \"graphite-clay paste\", :quantity {:units \"liters\", :value-string \"100\"}}], :resources [\"mixer\"], :duration {:units \"hours\", :value-string \"1\"}, :subprocesses {:val [], :comment \"We use empty array val values to signify that we don't think there are any interesting sub-process from the standpoint of scheduling.\\nOf course, this could be updated later if subsequent discussion suggests we are wrong.\"}} {:process-id \"extrude-core\", :inputs [\"graphite-clay paste\"], :outputs [{:item-id \"extruded graphite rods\", :quantity {:units \"extruded graphite core\", :value-string \"100000\"}}], :resources [\"extruder\"], :duration {:units \"minutes\", :value-string \"20\"}, :subprocesses []} {:process-id \"dry-and-bake-core\", :inputs [\"extruded graphite rods\"], :outputs [{:item-id \"extruded graphite rods\", :quantity {:units \"extruded graphite core\", :value-string \"100000\"}}], :resources [\"kiln\"], :duration {:units \"hours\", :value-string \"2\"}, :subprocesses []}]} {:process-id \"wood-casing-production\", :inputs [\"cedar wood\"], :outputs [\"wood slats with grooves\"], :resources [\"milling machine\"], :subprocess-flow {:val \"individuals-from-batch\", :comment \"The string 'individuals-from-batch' means that it isn't necessary to wait for all the slats to be created;\\nyou can start 'cut-grooves-in-slats' as soon as the first slat is available.\"}, :duration {:val {:units \"hours\", :value-string \"2\"}, :comment \"Because 'individuals-from-batch', this process's duration is (roughly speaking) the same as maximum of the two subprocesses.\"}, :subprocesses [{:process-id \"mill-wood-slats\", :inputs [\"cedar wood\"], :outputs [\"milled wood slats\"], :resources [\"milling machine\"], :duration {:units \"hours\", :value-string \"2\"}, :subprocess-flow {:val :individuals-from-batch, :comment \"'sub-process-flow' is about whether a batch must move through production steps as a batch or, alternatively, individuals from the batch can move.\\nThe string value 'individuals-from-batch' here means that it isn't necessary to wait for all the slats to be created, the process 'cut-grooves-in-slats'\\ncan start as soon as the first slat is available.\"}, :subprocesses []} {:process-id \"cut-grooves-in-slats\", :inputs [\"milled wood slats\"], :outputs [\"wood slats with grooves\"], :resources [\"groove cutter\"], :duration {:units \"hours\", :value-string \"2\"}, :subprocesses []}]} {:process-id \"assembly\", :inputs {:val [{:item-id \"graphite core\", :from \"graphite-core-production\"} {:item-id \"wood slats with grooves\", :from \"wood-casing-production\"} \"metal\" \"erasers\" \"paint\"], :comment \"The 'from' property names a process that must occur before a process that uses it as an input (e.g. this 'assembly' process).\\nThe 'from' property is essential to understanding process ordering and potential for concurrency.\"}, :outputs [\"finished pencil\"], :resources [\"glue applicator\" \"shaping machine\"], :subprocesses [{:process-id \"insert-core-into-slats\", :inputs [\"graphite core\" \"wood slats with grooves\"], :outputs [\"pencil blanks\"], :resources [\"glue applicator\"], :subprocesses []} {:process-id \"shape-and-paint-pencil\", :inputs [\"pencil blanks\" \"paint\"], :outputs [\"shaped and painted pencils\"], :resources [\"shaping machine\" \"painting station\"], :subprocesses []} {:process-id \"attach-eraser\", :optional? {:val true, :comment \"'optional?' means that the process does not occur for every product. Not every pencil has an eraser.\"}, :inputs [\"shaped and painted pencils\" \"metal\" \"erasers\"], :outputs [\"finished pencils\"], :resources [\"crimping tool\"], :subprocesses []}]}]}]}}}"}
          #:EADS{:id :process/job-shop-unique,
                 :msg-str
                 "{:message-type :EADS-INSTRUCTIONS, :interviewer-agent :process, :interview-objective \"These EADS-INSTRUCTIONS assumes the interviewees' production operates as a 'true' job shop -- an arrangement where possibly every job has a unique process plan.\\nThe purpose of these EADS-INSTRUCTIONS are to describe unit processes of jobs, their inputs, outputs, resources, and (sometimes) typical duration.\\nA unit process (you might define this term in your interview) is a a fundamental step in the production chain where a specific transformation\\nor change is applied to a material or component.\\nThe property unit-processes is a list of all processes objects the interviewees deem relevant to production scheduling.\\nThese process objects are similar to those used in other EADS, such as process/flow-shop, except that they do not have a subprocesses property.\\nThe process objects will be referenced in the definition of the job's process plan,\\nbut the interview association with this EADS does not capture that relation between the job and the processes.\\n\\nThe examples in the EADS are from an automotive machine shop, a quintessential example of a job shop.\\nWe only include two unit processes in the example, but a typical machine shop might have about 50.\", :EADS {:EADS-id :process/job-shop--unique, :unit-processes [{:process-id {:val \"hone-cylinder-bores\", :comment \"Name processes as you see fit, but make sure there are no duplicate uses of the name as process-id.\\nThough there are subprocesses to honing cylinder bores (e.g. fixturing engine block, selecting honing tools, honing, inspection)\\nthe interviewees deemed honing cylinder bores a unit process. This is quite reasonable.\"}, :inputs {:val [\"engine block\"], :comment \"'inputs' is a list of all the raw materials used to make the product.\"}, :outputs {:val [{:item-id \"honed engine block\", :quantity {:units \"unit\", :value-string \"1\"}}], :comment \"Inputs and outputs can either be simple strings like we used with 'engine block', or objects like this, with an 'item-id' and 'quantity'.\\nUse disgression (mindful of the questioning budget) about where you ask for quantities. Start simple and pursue details were the budget allows.\"}, :resources {:val [\"honing machine\" \"honing tool\" \"fixture\"], :comment \"Resources, unlike inputs, are durable and reusable. Do not ask about quantities of resources; that's a conversation for another interviewer.\"}, :duration {:val {:units \"hours\", :value-string \"2\"}, :comment \"We use a string for 'value-string' in case interviewees answer it something like 'it varies'.\\nYou might use a comment to describe the context of this value.\\nFor example, you could ask the interviewees about different durations for honing a straight 4 cylinder block versus a V8 and use their response\\nin a comment to elaborate important considerations about the unit process's duration.\"}} {:process-id \"aluminum-cylinder-head-resurfacing\", :inputs [\"cylinder head\"], :outputs [\"flat cylinder head\"], :resources {:val [\"milling machine\"], :comment \"We might have learned in the interview that they use a milling machine for resurfacing aluminum heads and a grinding machine for cast iron heads.\"}, :duration {:val {:units \"hours\", :value-string \"2\"}, :comment \"The value here does not include leak testing, which is treated as a separate unit process that usually follows resurfacing.\"}}]}}"}
          #:EADS{:budget-decrement 0.15,
                 :id :process/timetabling,
                 :msg-str
                 "{:message-type :EADS-INSTRUCTIONS, :budget-decrement 0.15, :interviewer-agent :process, :interview-objective \"Whereas most other EADS-INSTRUCTIONS in the process interview focus on characterizing the processes by which the interviewees' enterprise produces product or delivers a service,\\nprocess/timetabling does not. Timetabling is about assigning limited resources, such as classrooms, teachers, or machinery, to events types that will occur in timeslots.\\nTimetabling interviews are about characterizing the constituents (role players), event types, and timeslots (ts), not how enterprise makes product or delivers a service.\\nA timetabling discussion mediated by these EADS-INSTRUCTIONS might be tackling the interviewees principal scheduling problem, or the problem of some subprocess of it.\\nFor example, you might have pursued the process/flow-shop EADS, and learned that a particular subprocess in the flow uses timetabling.\\n\\nThe specifics of timetablings problems can vary widely depending on the enterprises's goals and circumstances.\\nFor example, in some cases, the time at which the event occurs can be chosen in light of opportunity.\\nFor example, one could timetable the use of a heat-treat oven based on having available a sufficient number of parts needing the same heat treat process.\\nLikewise one might timetable equipment maintenance opportunistically.\\nAnother opportunistic timetabling problem might involve perishable raw materials, such as food ingredients.\\nMany timetabling problems are not opportunistic, scheduling classes in a university, for example.\\n\\nThere are three kinds of event types in our formulation of timetabling:\\n    (1) regularly scheduled: they have property named 'periodicity',\\n    (2) one-time: their 'occurrence-assignment' property defines when they occur using a date, and,\\n    (3) opportunistic: their 'occurrence-assignment' property defines 'opportunistic? = true' and conditions (possibly including periodicity) in which they occur.\\n\\nYou can think of the information you are trying to capture in the interview as including descriptions of\\n   (1) a Cartesian product of constituents needed for the event type to occur,\\n   (2) rules for what constituents can, must, or must not occur together in instances of the Cartesian product, and\\n   (3) how instances of the Cartesian product can be assigned to timeslots.\\n\\nBe careful in how you define the quantity properties of event-constituent (event-consituent.quantity). These are not about how many of the constituant-type the inteviewees have.\\nThe Resource Interviewer is responsible for making that determination, not you.\\nInstead, event-constituent.quantity is about how many of the constituent-type might take part in the event. That quantity might signify the capacity of another constituent of the event type.\\nFor example, if a lecture room has capacity for 30 students. The event-constituent.quantity of students could be up to 30, but there is only one lecture room involved in the event type.\\n\\nYou have a choice as to how you communicate back to us in DATA-STRUCTURE-REFINEMENT (DSR) messages: you can accummulate information from interviewing about 'event-types' and 'timeslots'\\ninto a single structure, such as shown in the EADS example below.\\nAlternatively -- because we have code to combine the several DSRs you return in response to INTERVIEWEES-RESPOND -- you can send back just what you learned from the last few questions.\\nIn this arrangement you would minimally be returning an object for which we can navigate event-types.event-type-id or timeslots.ts-type-id and what you provide will overwrite any\\nexisting event-type object or timeslot-type object with that identifier.The challenge remains, however, that most event-type's occurrence-assignments refer to a timeslot's ts-type-id.\\n\", :EADS {:EADS-id :process/timetabling, :event-types {:comment \"The event-types property is a list of objects that capture\\n   *  'event-constituents'        : a Cartesian product of constituents in the sense described in the interview objectives, and\\n   *  'periodicity'            : (optional) the interval and number of instances in which periodic events of this event type occur.\\n   *  'occurrence-assignment'  : a reference to the timeslots in which this event type are allowed to occur. These are typically references to timeslots by means of 'ts-type-id'.\\n                                 but they can also be specific dates, e.g. '2025-03-06'.This example is about timetabling classes at a community college for one semester.\", :val [{:event-type-id {:val \"lecture-class-30-90min-type\", :comment \"Note that we used the suffix '-type' in the name to emphasize that this defines the general form for instances of this class, not an instance occurrence.\\nExample lecture-class-types include chemistry lectures and physics lectures.\\nYou, the interviewer, decided on this naming convention in light of the conversation you had with interviewees.\"}, :event-constituents {:comment \"These are the elements of the Cartesian product. When no quantity is specified, we assume exactly one is required.\", :val [{:constituent-type {:val \"room-type-30\", :comment \"Note the -30 suffix here is because (as shown below) the room should have capacity for 30 people and the event is '-30-90min-type'.\\nSimilar to 'event-type-id', you devised this naming convention.\\nThe meaning of room-type-30 will be made clear in the constituents interview, not here.\"}, :base-type {:val \"place\", :comment \"Possible values for this property are 'human', 'place', and 'equipment'.\"}} {:constituent-type \"student-type\", :base-type \"human\", :quantity {:units \"person\", :value-string \"30\", :modifier \"up to\"}} {:constituent-type \"chalk-board\", :base-type \"equipment\"} {:constituent-type \"instructor-type\", :base-type \"human\"}]}, :periodicity {:val {:interval {:units \"week\", :value-string \"1\"}, :occurrences {:value-string \"2\"}}, :comment \"This periodicity object describes the event type as (being periodic and) having two occurrence per week.\\nFor example, in this case, the interviewees suggested that many courses are taught as two 90-minute lectures per week.\"}, :occurrence-assignment {:val [\"Tu-Th-90min\"], :comment \"The values here are typically references to timeslots by means of their 'ts-type-id'.\"}} {:event-type-id \"lecture-class-30-60min-type\", :event-constituents [{:constituent-type \"room-type-30\", :base-type \"place\"} {:constituent-type \"student-type\", :base-type \"human\"} {:constituent-type \"instructor-type\", :base-type \"human\"}], :periodicity {:interval {:units \"week\", :value-string \"1\"}, :occurrences {:value-string \"3\"}}, :occurrence-assignment [\"Mon-Wed-Fri-60min\"]} {:event-type-id \"chem-lab-class\", :event-constituents {:val [{:constituent-type \"room-type-chem-lab\", :base-type \"place\"} {:constituent-type \"fume hood\", :base-type \"equipment\", :quantity {:value-string \"10\", :units \"instances\"}} {:constituent-type \"student-type\", :base-type \"human\"} {:constituent-type \"student-type\", :base-type \"human\"} {:constituent-type \"lab-assistant-type\", :base-type \"human\", :quantity {:units \"person\", :value-string \"2\"}}], :comment \"There is certainly more equipment required in a chemistry lab than just 'fume hood', but that constituent alone should be sufficient\\nto distinguish chemistry lab events from other kinds of other class events.\"}, :periodicity {:interval {:units \"week\", :value-string \"1\"}, :occurrences {:value-string \"1\"}}, :occurrence-assignment [\"Three-hour-lab\"]} {:event-type-id {:val \"instructor-break\", :comment \"This is an example of an opportunistic event with periodicity.\"}, :opportunistic? true, :event-constituents [{:constituent-type \"instructor-type\", :base-type \"human\"}], :periodicity {:interval {:units \"day\", :value-string \"1\"}, :occurrences {:value-string \"1\"}}, :occurrence-assignment [\"Mon-Wed-Fri-60min\" \"Tu-Th-90min\" \"Three-hour-lab\"]} {:event-type-id {:val \"spring-break\", :comment \"This is an example of a one-time event. It has no 'event-constituents'; in this sense, it is a non-event!\"}, :event-constituents {:val \"none\", :comment \"By the end of your interview, all event type objects should have 'event-type-id', 'event-constituents', 'periodicity', and\\n'occurrence-assignment'. Spring break does not require any constituents, so we'll just say 'none' here.\"}, :occurrence-assignment {:val [\"2025-03-17\" \"2025-03-18\" \"2025-03-19\" \"2025-03-20\" \"2025-03-21\"], :comment \"Instead of reference to a timeslot.ts-type-id, we put dates here.\"}, :periodicity {:val \"none\", :comment \"By the end of your interview, all event type objects should have 'event-type-id', 'event-constituents', 'periodicity', and\\n'occurrence-assignment'. Since in the context of one semester, spring break only occurs once, we'll just say 'none' here.\\nBy the way, we make things mandatory and allow 'none' so that we can check the data structure for completeness more thoroughly.\"}}]}, :timeslots [{:ts-type-id \"Mon-Wed-Fri-60min\", :availability [\"Monday\" \"Wednesday\" \"Friday\"], :periods [\"9:00-9:50\" \"10:00-10:50\" \"11:00-11:50\" \"13:00-13:50\" \"14:00-14:50\" \"15:00-15:50\" \"16:00-16:50\"]} {:ts-type-id \"Tu-Th-90min\", :availability [\"Tuesday\" \"Thursday\"], :periods {:val [\"9:00-10:20\" \"10:30-11:50\" \"13:00-14:20\" \"14:30-15:50\" \"16:00-17:20\"], :comment \"We asked the interviewees about the regularity of class events and came up with this formulation.\\nNote that our '90 minute' periods actually run 80 minutes to give people time to get to their next class, etc.\\n\"}} {:ts-type-id \"Three-hour-lab\", :availability [\"Monday\" \"Tuesday\" \"Wednesday\" \"Thursday\" \"Friday\"], :periods [\"9:00-11:50\" \"13:00-15:50\"]}]}}"}
          #:EADS{:id :process/job-shop--unique,
                 :msg-str
                 "{:message-type :EADS-INSTRUCTIONS, :interviewer-agent :process, :interview-objective \"These EADS-INSTRUCTIONS assumes the interviewees' production operates as a 'true' job shop -- an arrangement where possibly every job has a unique process plan.\\nThe purpose of these EADS-INSTRUCTIONS are to describe unit processes of jobs, their inputs, outputs, resources, and (sometimes) typical duration.\\nA unit process (you might define this term in your interview) is a a fundamental step in the production chain where a specific transformation\\nor change is applied to a material or component.\\nThe property unit-processes is a list of all processes objects the interviewees deem relevant to production scheduling.\\nThese process objects are similar to those used in other EADS, such as process/flow-shop, except that they do not have a subprocesses property.\\nThe process objects will be referenced in the definition of the job's process plan,\\nbut the interview association with this EADS does not capture that relation between the job and the processes.\\n\\nThe examples in the EADS are from an automotive machine shop, a quintessential example of a job shop.\\nWe only include two unit processes in the example, but a typical machine shop might have about 50.\", :EADS {:EADS-id :process/job-shop--unique, :unit-processes [{:process-id {:val \"hone-cylinder-bores\", :comment \"Name processes as you see fit, but make sure there are no duplicate uses of the name as process-id.\\nThough there are subprocesses to honing cylinder bores (e.g. fixturing engine block, selecting honing tools, honing, inspection)\\nthe interviewees deemed honing cylinder bores a unit process. This is quite reasonable.\"}, :inputs {:val [\"engine block\"], :comment \"'inputs' is a list of all the raw materials used to make the product.\"}, :outputs {:val [{:item-id \"honed engine block\", :quantity {:units \"unit\", :value-string \"1\"}}], :comment \"Inputs and outputs can either be simple strings like we used with 'engine block', or objects like this, with an 'item-id' and 'quantity'.\\nUse disgression (mindful of the questioning budget) about where you ask for quantities. Start simple and pursue details were the budget allows.\"}, :resources {:val [\"honing machine\" \"honing tool\" \"fixture\"], :comment \"Resources, unlike inputs, are durable and reusable. Do not ask about quantities of resources; that's a conversation for another interviewer.\"}, :duration {:val {:units \"hours\", :value-string \"2\"}, :comment \"We use a string for 'value-string' in case interviewees answer it something like 'it varies'.\\nYou might use a comment to describe the context of this value.\\nFor example, you could ask the interviewees about different durations for honing a straight 4 cylinder block versus a V8 and use their response\\nin a comment to elaborate important considerations about the unit process's duration.\"}} {:process-id \"aluminum-cylinder-head-resurfacing\", :inputs [\"cylinder head\"], :outputs [\"flat cylinder head\"], :resources {:val [\"milling machine\"], :comment \"We might have learned in the interview that they use a milling machine for resurfacing aluminum heads and a grinding machine for cast iron heads.\"}, :duration {:val {:units \"hours\", :value-string \"2\"}, :comment \"The value here does not include leak testing, which is treated as a separate unit process that usually follows resurfacing.\"}}]}}"}
          #:EADS{:budget-decrement 0.05,
                 :id :data/orm,
                 :msg-str
                 "{:message-type :EADS-INSTRUCTIONS, :budget-decrement 0.05, :interviewer-agent :data, :interview-objective \"You, the data interviewer, discover and document information that interviewees use to do their work (scheduling production or providing a service to customers).\\nThe interview you lead reveals characteristics of their data and creates example data of the sorts that they described to you.\\nWe will use these data to together (humans and AI) define a simple prototype of the interviewees' MiniZinc-based production scheduling system.\\n\\nThere are three tasks to be achieved in this interview:\\n    Task 1: enumerating the areas of inquiry that are involved in making scheduling decisions in the interviewees' work,\\n    Task 2: determining the relationships and constraints among the data of these areas of inquiry and expressing these as Object Role Modeling (ORM) fact types, and,\\n    Task 3: for each ORM fact type, creating a table of example data that the interviewees would deem realistic.\\n\\nTask 1 is performed once, after which Tasks 2 and 3 are repeated for each area of inquiry and its fact types, until all the areas of inquiry are covered.Working this way, you will help keep the interviewees focused.\\n\\nIn Task 1, the goal is to categorize their elementary quantitative and structured data into 'areas of inquiry'.\\nWe use the word 'elementary' to emphasize that this interview should only discuss the data essential to creating a simple prototype of the scheduling system.\\nWe will initiate a more comprehensive interview only after demonstrating a simple prototype.\\nWe provide an enumeration of potential areas of inquiry in the EADS below.\\nYou are encouraged to use this enumeration, but you can use EADS annotations to add categories if needed.\\n\\nIn Task 2, we are particularly interested in capturing domain semantics of the data in the viewpoint of Object Role Modeling (ORM).\\nSpecifically, Task 2 is about defining all the ORM fact types of the subject area of inquiry.\\nThe best way to do this might be to first elicit from the interviewees all the concepts (ORM objects) relevant to the area of inquiry and then suggest to them (as verbalization of a \\nhypothesized fact types) how the concepts interrelate.\\nFor example, if interviewees have indicated that they maintain records of employee skills and skill certification dates, you might ask:\\n'As you have pointed out, in your business employees have an employee number. Do you similarly use a code of some sort to describe the skill?'\\nAlso you might ask: 'For each employee (employee number) and skill (skill code) do you keep every certification date, or just the most recent?\\nThen before initiating discussion of another fact type, do Task 3 (create a table of example data corresponding to the data type):\\n\\n'Does the following table of employee skill certification capture the sorts of information we have discussed? Feel free to edit the table.'\\n#+begin_src HTML\\n<table>\\n   <tr><th>Employee No.</th>        <th>Skill</th>               <th>Certification Date</th></tr>\\n   <tr><td>EN-123</td>              <td>Milling Centers</td>     <td>  2024-10-05           </tr>\\n   <tr><td>EN-098</td>              <td>Milling Centers</td>     <td>  2022-11-13           </tr>\\n   <tr><td>EN-891</td>              <td>EDM machines</td>        <td>  2023-03-28           </tr>\\n</table>\\n#+end_src\\nAs the example suggests, recall that you can include an HTML table in a question to the interviewees by wrapping the table in #+begin_src HTML ***your table*** #+end_src.\\nWe are able to read the tables you provide into a UI component that allows interviewees to edit the content of cells, and add and remove rows.\\n\\nORM allows expression of constraints typical of a predicate calculus representation, including quantification, subtyping, cardinality, functional relationship, domain of roles, and disjointedness.\\nOur encoding of ORM fact types borrows from ORM's visual depiction.\\nFor example, for an n-ary fact type (an n-ary predicate), we use arrays of n elements to associate property values matching each of the n compartments of the visual depiction of the fact type role box.\\nConsider, for example, the ternary fact type 'ACADEMIC obtained DEGREE from UNIVERSITY' in Figure 9 of 'Object-Role Modeling: an overview' (a paper provided to you).\\nWe would encode this fact type as:\\n\\n{\\n  \\\"fact-type-id\\\" : \\\"ACADEMIC-obtains-DEGREE-from-UNIVERSITY\\\",\\n  \\\"arity\\\" : 3,\\n  \\\"objects\\\" : [ \\\"academic\\\", \\\"degree\\\", \\\"university\\\" ],\\n  \\\"reference-modes\\\" : [ \\\"empNr\\\", \\\"code\\\", \\\"code\\\" ],\\n  \\\"deontic-keys\\\" : [ \\\"mandatory\\\", \\\"\\\", \\\"\\\" ],\\n  \\\"uniqueness\\\" : [ [ \\\"key1\\\", \\\"key1\\\", \\\"\\\" ] ]\\n}\\nHere the object properties 'objects', 'reference-modes', and 'deontic' must each contain three elements because that is the arity (role count) of sentences of the sort '[Academic] obtains [degree] from [university]'.\\nThe three ordered values of the 'objects' property represents three corresponding compartments of a 'role box' in a visual representation.\\nThe ordering facilitiates a verbalization of the fact type, in this case, 'Academic obtains degree from university'.\\n(Note that in Task 3, the corresponding table data might include a row ' Dr. John Smith |  mathematics PhD | MIT '.\\nThe table data is ordered the same as the compartments in the role box.)\\n\\nThe 'uniqueness' property represents how a subset of the fact type compartments determines the value of the remaining ones.\\nIn the above [ \\\"key1\\\", \\\"key1\\\", \\\"\\\" ] represents the idea that there is a functional relationship between tuples [academic, degree], as domain and univerity, as co-domain.\\nTo continue the example, we mean that if we are talking about Dr. John Smith and his mathematics PhD, it is at MIT\\nThat is, we are stipulating that a person can only get a particular degree once (or that we only care that they got it once).\\n\\nThere can be multiple ORM 'uniqueness' constraints on a fact type; each array valued element must likewise contain the same number of elements as \\nthe arity and same ordering as the 'objects' property.\\nWere, for example, we to live in a world where people can get at most one degree at any university, we could specify another ORM uniqueness constraint [ \\\"key2\\\", \\\"\\\", \\\"key2\\\" ] which maps tuples [academic, university] to a degree.\\n\\nORM also has provision to express constraints across fact types, and between object types.\\nFigure 9 of the paper depicts that (1) an academic being tenured and being contracted are exclusive of each other, and (2) professor is a kind of academic.\\nWe represent these two constraints with the two following objects respectively:\\n\\n{\\n  \\\"inter-fact-type-id\\\" : \\\"tenured-or-contracted\\\",\\n  \\\"relation-type\\\" : \\\"exclusive-or\\\",\\n  \\\"fact-type-roles\\\" : [ {\\n    \\\"fact-type-ref\\\" : \\\"ACADEMIC-is-tenured\\\",\\n    \\\"role-position\\\" : 1\\n  }, {\\n    \\\"fact-type-ref\\\" : \\\"ACADEMIC-is-contracted-till\\\",\\n    \\\"role-position\\\" : 1\\n  } ]\\n}and\\n{\\n  \\\"inter-object-id\\\" : \\\"PROFESSOR-is-ACADEMIC\\\",\\n  \\\"relation-type\\\" : \\\"is-kind-of\\\",\\n  \\\"source-object\\\" : \\\"professor\\\",\\n  \\\"target-object\\\" : \\\"academic\\\"\\n}\\n\\nSUMMARY RECOMMENDATIONS\\nWe encourage you to start the interview (start Task 1) with an open-ended question about the kinds of data the interviewees use, for example, for interviewees involved in manufacturing you might ask:\\n\\n   'To get started, could you list the kinds of data that you use to schedule production?\\n    For example, do you have speadsheets containing customer orders, raw material delivery, process plans, materials on hand, task durations, worker skills, etc.?\\n\\nGiven the response from this, you can set the 'areas-we-intend-to-discuss' property (see below) to a list of strings naming what areas the interviewees' response suggest are important to discuss.\\nBecause this interview should be scoped to the needs of creating a simple prototype of the scheduling system, it should not wander into areas of inquiry that are unnecessary to discuss in the context of a simple prototype.\\nWe will extend the prototype system incrementally as we go.\\nOnce you have established what you would like to discuss (setting areas-we-intend-to-discuss in Task 1), you can then discuss (a possible subset of) these area starting with fundamental facts first, \\nrepeating Task 2 and Task 3 for each fact type of the area of inquiry.\\nSet 'exhausted?' to true (see the EADS below) when you are have discussed everthing you intend to discuss.\\nSetting 'exhuasted?' to true should cause us to stop sending you SUPPLY-QUESTION messages.\\n\\nYou have choices as to how you communicate back to us in DATA-STRUCTURE-REFINEMENT (DSR) messages. You can\\n   (1) accummulate results from several inquiry areas into one ever-growing DSR message, as is shown in the EADS below,\\n   (2) limit what is in a DSR message to just one or a few inquiry areas (thus one or a few elements in the :areas-we-intend-to-discuss), or\\n   (3) limit what is in a DSR message to just one or more fact-types in an inquiry area.\\nIn order for us to index DSR message of type (3) into our database, it is essential that you provide the 'inquiry-area-id' to which you are committing a fact type.\\nFor example, if you just wanted to commit the 'ORDER-is-for-CUSTOMER' fact type of the 'customer-orders' area of inquiry, in the EADS example below, 'data-structure' property of your DSR message would be:\\n{\\n  \\\"inquiry-area-id\\\" : \\\"customer-orders\\\",\\n  \\\"fact-types\\\" : [ {\\n    \\\"fact-type-id\\\" : \\\"ORDER-is-for-CUSTOMER\\\",\\n    \\\"arity\\\" : 2,\\n    \\\"objects\\\" : [ \\\"order\\\", \\\"customer\\\" ],\\n    \\\"reference-modes\\\" : [ \\\"order-number\\\", \\\"customer-id\\\" ],\\n    \\\"deontic-keys\\\" : [ \\\"mandatory\\\", \\\"\\\" ],\\n    \\\"uniqueness\\\" : [ [ \\\"key1\\\", \\\"\\\" ] ],\\n    \\\"examples\\\" : {\\n      \\\"column-headings\\\" : [ \\\"order-number\\\", \\\"customer-id\\\" ],\\n      \\\"rows\\\" : [ [ \\\"CO-865204\\\", \\\"CID-8811\\\" ], [ \\\"CO-863393\\\", \\\"CID-8955\\\" ], [ \\\"CO-865534\\\", \\\"CID-0013\\\" ] ]\\n    }\\n  } ]\\n}Note that\\n    (1) the example conforms to the structure of the complete EADS defined below, for example 'fact-types' is a list even though only one is provided, and,\\n    (2) the example assumes that 'customer-orders' already defined the 'order' and 'customer' objects in its 'inquiry-area-objects'.\\n    (3) if you every need to reassess a fact type (for example if you now think it was represented wrong in prior discussion) just send the new one in your DSR message; it will overwrite the current one.\\n\\nORM is designed to encourage verbalization of fact types.\\nWe encourage you to use such verbalizations in Task 2 as follow-up questions when the interviewees' response leaves you uncertain what fact type is intended.\\nFor example, in Task 2 you might have discussed a fact type corresponding to the table above with rows 'Employee No.', 'Skill', and 'Certification Date' as described above.\\nBut it was unclear whether or not they were keeping a history of certification dates or just a single date. In this case you might ask:\\n'Is it the case that you associate at most one Certification Date with each employee and skill?'\\n\\nGood luck!\", :EADS {:EADS-id :data/orm, :exhausted? {:val false, :comment \"You don't need to specify this property until you are ready to set its value to true, signifying that you believe that all areas of inquiry have been sufficiently investigated.\\n\"}, :areas-we-intend-to-discuss {:val [\"customer-orders\" \"workforce\"], :comment \"In Task 1, use this property to give names to the areas of inquiry you plan to discuss.\"}, :inquiry-areas [{:inquiry-area-id {:val \"customer-orders\", :comment \"'customer-orders' is a value in an enumeration of areas of inquiry and one of the values in the property 'areas-we-intend-to-discuss'.\\nThe enumeration values are defined as follows:\\n\\n'customer-orders' - about products customers are ordering, their quantities, due dates, expected ship dates, etc..\\n'materials' - about things that go into making products, including things on hand, en route to the facility, or on order, their expected delivery dates, etc..\\n'bill-of-materials' - about what materials go into creating a product of a given product type.\\n'WIP' - about work in process, its state of completion etc.\\n'processes' - about production processes and process plans, tasks, task durations, equipment used, etc..\\n'equipment' - about machines and tools, their capabilities, capacity, and number.\\n'workforce' - about people, their skills, and other information about them relevant to scheduling.\\n\\nThis enumeration might be incomplete. Whenever nothing here seems to fit, create another term and define it with an annotation comment.\\n\\nWhen Task 1 is completed but you have not yet started Task 2 on any fact types, the 'inquiry-areas' property will contain a list of simple objects such as{\\n  \\\"inquiry-area-id\\\" : \\\"customer-orders\\\"\\n} {\\n  \\\"inquiry-area-id\\\" : \\\"WIP\\\"\\n} and so on.\\n\\nIt is important to keep in mind that we are developing the scheduling system incrementally;\\n your interview should only concerns discussions of areas of inquiry necessary to develop a simple prototype of that system.\"}, :inquiry-area-objects {:comment \"This property provides a list of objects (in the JSON sense) where each object names an object in the ORM sense (entities) and provides a definition for it.\\nThese represent the relevant entities of the universe of discourse of the area of inquiry.\", :val [{:object-id \"product\", :definition {:comment \"You don't have to ask the interviewees for a definition; if what is intended seems obvious just provide that.\\nObject-ids need only be unique within the context of an area of inquiry.\", :val \"a unique identifier for the product type.\"}} {:object-id \"order\", :definition \"a string unique to their operations for identifying an order.\"} {:object-id \"customer\", :definition \"the person or organization for which the product is being provided.\"} {:object-id \"promise-date\", :definition \"The date by which the firm promised to have delivered the product to the customer.\"} {:object-id \"quantity\", :definition \"An amount of something. (In the narrow context being defined, the quantity of product ordered.\"}]}, :fact-types {:comment \"This property provides a list of ORM fact type objects involving the inquiry-area-objects. Thus this captures actual Task 2 ORM modeling.\", :val [{:fact-type-id \"ORDER-has-PROMISE-DATE\", :arity 2, :objects [\"order\" \"promise-date\"], :reference-modes [\"order-number\" \"timepoint\"], :deontic-keys [\"mandatory\" \"\"], :uniqueness {:val [[\"key1\" \"\"]], :comment \"Since every order participates in this relationship (mandatory), and order, through the order-number, uniquely identifies a promise date (uniqueness),\\nwe can infer that every order is associated with exactly one promise date.\"}, :examples {:comment \"Completing this is the work of Task 3. We are showing only three rows of data in this example. Typically you might show ten or so.\", :val {:column-headings {:val [\"order-number\" \"promise-date\"], :comment \"The interviewer (you) used the reference-mode 'order-number' but the object name 'promise-date'.\\nThis is the most natural and meaningful naming for these data.\"}, :rows [[\"CO-865204\" \"2025-11-06\"] [\"CO-863393\" \"2025-11-13\"] [\"CO-865534\" \"2025-03-28\"]]}}} {:fact-type-id \"ORDER-has-PRODUCT-QUANTITY\", :arity 3, :objects [\"order\" \"product\" \"quantity\"], :reference-modes [\"order-number\" \"product-code\" \"quantity\"], :deontic-keys [\"mandatory\" \"\" \"\"], :uniqueness [[\"key1\" \"key1\" \"\"]], :examples {:column-headings [\"order-number\" \"product-code\" \"quantity\"], :rows [[\"CO-865204\" \"PN-38553\" \"1 unit\"] [\"CO-863393\" \"PN-37454\" \"7 unit\"] [\"CO-865534\" \"PN-73853\" \"2 family pack\"]]}} {:fact-type-id \"ORDER-is-for-CUSTOMER\", :arity 2, :objects [\"order\" \"customer\"], :reference-modes [\"order-number\" \"customer-id\"], :deontic-keys [\"mandatory\" \"\"], :uniqueness [[\"key1\" \"\"]], :examples {:column-headings [\"order-number\" \"customer-id\"], :rows [[\"CO-865204\" \"CID-8811\"] [\"CO-863393\" \"CID-8955\"] [\"CO-865534\" \"CID-0013\"]]}}]}} {:inquiry-area-id \"workforce\", :inquiry-area-objects [{:object-id \"employee\", :definition \"someone who works for the company.\"} {:object-id \"skill\", :definition \"a capability of an employee described by a skill code\"} {:object-id \"certification\", :definition \"the passing of a test about ones ability at a specific task.\"}], :fact-types [{:fact-type-id \"EMPLOYEE-certifies-SKILL-at-DATE\", :arity 3, :objects [\"employee\" \"skill\" \"certification\"], :reference-modes {:val [\"employee-number\" \"skill-code\" \"timepoint\"], :comment \"Regarding the 'timepoint' reference mode,  the interviewees use 'certification' and 'certification-date' interchangeably.\\nSimilarly, we conflate the concept with the time of the event.\"}, :uniqueness [[\"key1\" \"key1\" \"\"]], :examples {:column-headings [\"Employee No.\" \"Skill\" \"Certification Date\"], :rows [[\"EN-123\" \"Milling Centers\" \"2024-10-05\"] [\"EN-098\" \"Milling Centers\" \"2022-11-13\"] [\"EN-891\" \"EDM machines\" \"2023-03-28\"]]}}]}]}}"}
          #:EADS{:budget-decrement 0.05,
                 :id :process/warm-up,
                 :msg-str
                 "{:message-type :EADS-INSTRUCTIONS, :interview-objective \"This is typically the EADS to use in cases where there has been very little conversation so far, where the activities property of CONVERSATION-ACTIVITY is empty or nearly so.\\nThe objective of this interview segment is to \\n   1) get the interviewees started in discussing their scheduling problem, and,\\n   2) make some basic observations about the scheduling challenges they face.\\nThe first question to ask in this interview segment, which we call the 'warm up question' is simply this:\\n\\n 'What are the products you make or the services you provide, and what is the scheduling challenge involving them? Please describe in a few sentences.' \\n\\nBut remember, you don't ask that question until you receive a SUPPLY-QUESTION message!\\nThe correct response to an EADS-INSTRUCTIONS message such as this one is always, {\\\"message-type\\\": \\\"STATUS\\\", \\\"status\\\": \\\"OK\\\"}.\\nCompleting the EADS (responding with a complete DATA-STRUCTURE-REFINEMENT message) may require more than just that one question, however.\\nExamine the EADS to determine what other questions you may wish to ask.\\n\", :EADS {:EADS-id :process/warm-up, :scheduling-challenges {:comment \"The value here should be an enumeration of any of the 15 keywords provided below that characterize the kinds of problems they face.\\nDO NOT ask questions specifically about these.\\nInstead, use the responses you got back from determining 'principal-problem-type', 'continuous?' and 'cyclical?' to determine the value of this property.\\nThe reason that we ask that you do not ask specifically about these is that we do not want to 'put words in their mouthes'.\\nWe want to know what is on their mind without prompting them with suggestions.\\n\\nHere are the 15 keywords you can use, and their definitions:\\n\\n  1) raw-material-uncertainty : They sometimes don't have the raw material they need to make what they want to make.\\n  2) demand-uncertainty : They are uncertain what to make because they are uncertain what customers need.\\n  3) delivery-schedules : They are having problems meeting delivery promise dates.\\n  4) variation-in-demand : They have slow periods and very busy periods. This is often the case, for example, when demand has seasonality.\\n  5) planned-maintenance : They need to accommodate equipment maintenance schedules in their production schedules.\\n  6) resource-assignment : They need to reserve several resources for simultaneous use.\\n  7) equipment-changeover : The time it takes to change equipment setting and tooling is considerable.\\n  8) equipment-availability : They struggle with equipment breakdowns.\\n  9) equipment-utilization : They have expensive equipment that they would like to be able to use more.\\n  10) worker-availability : They struggle with shortages of workers.\\n  11) skilled-worker-availability : This is a specific subtype of 'worker-availability' where they suggest that matching worker skills and/or certification to the process is the challenge.\\n  12) bottleneck-processes : The pace of their production is throttled by just a few processes.\\n  13) process-variation : They have many different processes for making roughly the same class of products.\\n  14) product-variation : They have many different products to make.\\n  15) meeting-KPIs : They mention key performance indicators (KPIs) or difficulty performing to them.\\n\\nSuppose they answered the warm-up question with the following:\\n    'We primarily produce various types of plate glass, including clear, tinted, and tempered glass, used in construction,      automotive, and architectural applications. Our main scheduling challenge is efficiently coordinating production runs to      match supply with fluctuating demand, minimize downtime during equipment changeovers for different glass types, and manage      the lead times associated with raw material sourcing and delivery. Additionally, we must balance production with the availability      of skilled labor and maintenance schedules to ensure optimal use of resources.'\\n\\nThen a reasonable response to for scheduling challenges would be\\n  [\\\"process-variation\\\", \\\"demand-uncertainty\\\", \\\"equipment-changeover\\\", \\\"skilled-worker-availability\\\", \\\"planned-maintenance\\\", \\\"product-variation\\\"].\\n\", :val [\"process-variation\" \"demand-uncertainty\" \"equipment-changeover\" \"skilled-worker-availability\" \"planned-maintenance\" \"product-variation\"]}, :one-more-thing {:comment \"This is an opportunity to make one more observation (beyond those in 'scheduling-challenges') about their challenges.\\nAgain, like 'scheduling-challenges', formulate your value for this property without asking additional questions.\\nYour response should be a single sentence.\", :val \"They are probably talking about scheduling production on multiple lines.\"}, :product-or-service-name {:comment \"Based only on the interviewees' response to prior questions, provide a name for the product they produce or service they deliver.\", :val \"plate glass\"}}}"}
          #:EADS{:budget-decrement 0.05,
                 :id :process/warm-up-with-challenges,
                 :msg-str
                 "{:message-type :EADS-INSTRUCTIONS, :interview-objective \"This is typically the EADS the orchestrator will use first.\\nUse it in cases where there has been very little conversation so far, where the activities property of CONVERSATION-HISTORY is empty or nearly so.\\nThe objective of this interview segment is to \\n   1) get the interviewees started in discussing their scheduling problem, and,\\n   2) make some basic observations about the scheduling challenges they face.\\nThe first question to ask in this interview segment, which we call the 'warm up question' is simply this:\\n\\n 'What are the products you make or the services you provide, and what is the scheduling challenge involving them? Please describe in a few sentences.' \\n\\nBut remember, you don't ask that question until you receive a SUPPLY-QUESTION message!\\nThe correct response to an EADS-INSTRUCTIONS message such as this one is always, {\\\"message-type\\\": \\\"STATUS\\\", \\\"status\\\": \\\"OK\\\"}.\\nCompleting the EADS (responding with a complete DATA-STRUCTURE-REFINEMENT message) may require more than just that one question, however.\\nExamine the EADS to determine what other questions you may wish to ask.\\n\", :EADS {:EADS-id :process/warm-up-with-challenges, :scheduling-challenges {:comment \"The value here should be an enumeration of any of the 15 keywords provided below that characterize the kinds of problems they face.\\nDO NOT ask questions specifically about these.\\nInstead, use the responses you got back from determining 'principal-problem-type', 'continuous?' and 'cyclical?' to determine the value of this property.\\nThe reason that we ask that you do not ask specifically about these is that we do not want to 'put words in their mouthes'.\\nWe want to know what is on their mind without prompting them with suggestions.\\n\\nHere are the 15 keywords you can use, and their definitions:\\n\\n  1) raw-material-uncertainty : They sometimes don't have the raw material they need to make what they want to make.\\n  2) demand-uncertainty : They are uncertain what to make because they are uncertain what customers need.\\n  3) delivery-schedules : They are having problems meeting delivery promise dates.\\n  4) variation-in-demand : They have slow periods and very busy periods. This is often the case, for example, when demand has seasonality.\\n  5) planned-maintenance : They need to accommodate equipment maintenance schedules in their production schedules.\\n  6) resource-assignment : They need to reserve several resources for simultaneous use.\\n  7) equipment-changeover : The time it takes to change equipment setting and tooling is considerable.\\n  8) equipment-availability : They struggle with equipment breakdowns.\\n  9) equipment-utilization : They have expensive equipment that they would like to be able to use more.\\n  10) worker-availability : They struggle with shortages of workers.\\n  11) skilled-worker-availability : This is a specific subtype of 'worker-availability' where they suggest that matching worker skills and/or certification to the process is the challenge.\\n  12) bottleneck-processes : The pace of their production is throttled by just a few processes.\\n  13) process-variation : They have many different processes for making roughly the same class of products.\\n  14) product-variation : They have many different products to make.\\n  15) meeting-KPIs : They mention key performance indicators (KPIs) or difficulty performing to them.\\n\\nSuppose they answered the warm-up question with the following:\\n    'We primarily produce various types of plate glass, including clear, tinted, and tempered glass, used in construction,      automotive, and architectural applications. Our main scheduling challenge is efficiently coordinating production runs to      match supply with fluctuating demand, minimize downtime during equipment changeovers for different glass types, and manage      the lead times associated with raw material sourcing and delivery. Additionally, we must balance production with the availability      of skilled labor and maintenance schedules to ensure optimal use of resources.'\\n\\nThen a reasonable response to for scheduling challenges would be\\n  [\\\"process-variation\\\", \\\"demand-uncertainty\\\", \\\"equipment-changeover\\\", \\\"skilled-worker-availability\\\", \\\"planned-maintenance\\\", \\\"product-variation\\\"].\\n\", :val [\"process-variation\" \"demand-uncertainty\" \"equipment-changeover\" \"skilled-worker-availability\" \"planned-maintenance\" \"product-variation\"]}, :one-more-thing {:comment \"This is an opportunity to make one more observation (beyond those in 'scheduling-challenges') about their challenges.\\nAgain, like 'scheduling-challenges', formulate your value for this property without asking additional questions.\\nYour response should be a single sentence.\", :val \"They are probably talking about scheduling production on multiple lines.\"}, :product-or-service-name {:comment \"Based only on the interviewees' response to prior questions, provide a name for the product they produce or service they deliver.\", :val \"plate glass\"}}}"}],
         :agents
         [#:agent{:base-type :data-interview-agent,
                  :agent-type :shared-assistant,
                  :tools "[{:type \"file_search\"}]",
                  :model-class :gpt,
                  :llm-provider :openai,
                  :vector-store-paths
                  ["resources/agents/iviewrs/papers/object-role-modeling--an-overview.pdf"],
                  :instruction-path
                  "/tmp/stbd-agents/data-interviewer.txt",
                  :timestamp #inst "2025-06-03T20:46:51.756-00:00",
                  :agent-id :data-interview-agent-openai}
          #:agent{:base-type :data-interview-agent,
                  :agent-type :shared-assistant,
                  :tools "[{:type \"file_search\"}]",
                  :model-class :gpt,
                  :llm-provider :openai,
                  :vector-store-paths
                  ["resources/agents/iviewrs/papers/object-role-modeling--an-overview.pdf"],
                  :instruction-path
                  "/tmp/stbd-agents/data-interviewer.txt",
                  :assistant-id "asst_aH2xqHWSW2mTGI8oLKpWKuj1",
                  :timestamp #inst "2025-06-17T16:30:57.694-00:00",
                  :agent-id :data-interview-agent}
          #:agent{:base-type :response-analysis-agent,
                  :agent-type :system,
                  :response-format-path
                  "resources/agents/response-analysis-format.edn",
                  :thread-id "thread_p4i8WPiS7ag78H5hWhSuTXIZ",
                  :llm-provider :openai,
                  :instruction-path
                  "resources/agents/response-analysis-agent.txt",
                  :assistant-id "asst_6KIYxR8bwSnOB69zyDZVQdPg",
                  :timestamp #inst "2025-06-17T21:47:56.535-00:00",
                  :agent-id :response-analysis-agent}
          #:agent{:base-type :orchestrator-agent,
                  :agent-type :shared-assistant,
                  :tools "[{:type \"file_search\"}]",
                  :model-class :gpt,
                  :llm-provider :openai,
                  :vector-store-paths
                  ["resources/agents/iviewrs/EADS/data/orm.json"
                   "resources/agents/iviewrs/EADS/process/flow-shop.json"
                   "resources/agents/iviewrs/EADS/process/job-shop--classifiable.json"
                   "resources/agents/iviewrs/EADS/process/job-shop--unique.json"
                   "resources/agents/iviewrs/EADS/process/job-shop.json"
                   "resources/agents/iviewrs/EADS/process/scheduling-problem-type.json"
                   "resources/agents/iviewrs/EADS/process/timetabling.json"
                   "resources/agents/iviewrs/EADS/process/warm-up-with-challenges.json"],
                  :instruction-path
                  "resources/agents/orchestrator.txt",
                  :assistant-id "asst_WRzWewXmYtIk7zvlqeaxq53V",
                  :timestamp #inst "2025-06-17T16:31:12.339-00:00",
                  :agent-id :orchestrator-agent}
          #:agent{:base-type :text-to-var,
                  :agent-type :system,
                  :response-format-path
                  "resources/agents/text-to-var-response-format.edn",
                  :thread-id "thread_wzNqn7ooP5CXOmtojDZvStu8",
                  :model-class :mini,
                  :llm-provider :openai,
                  :instruction-path "resources/agents/text-to-var.txt",
                  :assistant-id "asst_SqMEyS0LGBjxShxXc01RqyhA",
                  :timestamp #inst "2025-06-17T21:44:16.139-00:00",
                  :agent-id :text-to-var}
          #:agent{:base-type :optimality-interview-agent,
                  :agent-type :shared-assistant,
                  :model-class :gpt,
                  :llm-provider :openai,
                  :instruction-path
                  "/tmp/stbd-agents/optimality-interviewer.txt",
                  :assistant-id "asst_akK3OGJBOiXtsFcH4CAWdsIe",
                  :timestamp #inst "2025-06-04T12:45:21.614-00:00",
                  :agent-id :optimality-interview-agent}
          #:agent{:base-type :text-function-agent,
                  :agent-type :system,
                  :thread-id "thread_ilD0hoBKfjL0TxlC2vNsPjOq",
                  :llm-provider :openai,
                  :instruction-path
                  "resources/agents/text-function-agent.txt",
                  :assistant-id "asst_8SNTc7KEvm1sIxehCNAT248Z",
                  :timestamp #inst "2025-06-17T21:48:06.792-00:00",
                  :agent-id :text-function-agent}
          #:agent{:base-type :process-interview-agent,
                  :agent-type :shared-assistant,
                  :model-class :gpt,
                  :llm-provider :openai,
                  :instruction-path
                  "/tmp/stbd-agents/process-interviewer.txt",
                  :assistant-id "asst_BgM9lCZmBo0BhKdBJTNFEGLy",
                  :timestamp #inst "2025-06-17T16:30:45.993-00:00",
                  :agent-id :process-interview-agent}
          #:agent{:base-type :resources-interview-agent,
                  :agent-type :shared-assistant,
                  :model-class :gpt,
                  :llm-provider :openai,
                  :instruction-path
                  "/tmp/stbd-agents/resources-interviewer.txt",
                  :assistant-id "asst_Z8OIRCCEGCPNfQOnuSGsb85V",
                  :timestamp #inst "2025-06-04T12:45:22.720-00:00",
                  :agent-id :resources-interview-agent}],
         :default-project-id :sur-craft-beer,
         :name "SYSTEM",
         :projects
         [#:project{:dir "/opt/scheduling/projects/blank-project",
                    :id :blank-project,
                    :name "Blank Project"}
          #:project{:dir
                    "/opt/scheduling/projects/craft-beer-brewery-scheduling",
                    :id :craft-beer-brewery-scheduling,
                    :name "Craft Beer Brewery Scheduling"}
          #:project{:dir
                    "/opt/scheduling/projects/snowboards-production-scheduling",
                    :id :snowboards-production-scheduling,
                    :name "Snowboards Production Scheduling"}
          #:project{:dir
                    "/opt/scheduling/projects/aluminium-foil-production-scheduling",
                    :id :aluminium-foil-production-scheduling,
                    :name "Aluminium Foil Production Scheduling"}
          #:project{:dir "/opt/scheduling/projects/sur-canned-corn",
                    :id :sur-canned-corn,
                    :name "Sur Canned Corn"}
          #:project{:dir
                    "/opt/scheduling/projects/sur-canned-vegetables",
                    :id :sur-canned-vegetables,
                    :name "Sur Canned Vegetables"}
          #:project{:dir "/opt/scheduling/projects/sur-aluminum-cans",
                    :id :sur-aluminum-cans,
                    :name "Sur Aluminum Cans"}
          #:project{:dir
                    "/opt/scheduling/projects/sur-remanufactured-alternators/db/",
                    :id :sur-remanufactured-alternators,
                    :name "SUR Remanufactured Alternators"}
          #:project{:dir
                    "/opt/scheduling/projects/sur-ice-hockey-sticks/db/",
                    :id :sur-ice-hockey-sticks,
                    :name "SUR Ice Hockey Sticks"}
          #:project{:dir "/opt/scheduling/projects/sur-craft-beer/db/",
                    :id :sur-craft-beer,
                    :name "SUR Craft Beer"}
          #:project{:dir
                    "/opt/scheduling/projects/sur-injection-molds",
                    :id :sur-injection-molds,
                    :name "Sur Injection Molds"}
          #:project{:dir "/opt/scheduling/projects/sur-stoneware/db/",
                    :id :sur-stoneware,
                    :name "SUR Stoneware"}
          #:project{:dir "/opt/scheduling/projects/sur-ice-cream/db/",
                    :id :sur-ice-cream,
                    :name "SUR Ice Cream"}
          #:project{:dir
                    "/opt/scheduling/projects/sur-inline-skates/db/",
                    :id :sur-inline-skates,
                    :name "SUR Inline Skates"}
          #:project{:dir
                    "/opt/scheduling/projects/sur-fountain-pens/db/",
                    :id :sur-fountain-pens,
                    :name "SUR Fountain Pens"}
          #:project{:dir
                    "/opt/scheduling/projects/sur-garage-doors/db/",
                    :id :sur-garage-doors,
                    :name "SUR Garage Doors"}
          #:project{:dir "/opt/scheduling/projects/sur-carpet/db/",
                    :id :sur-carpet,
                    :name "SUR Carpet"}
          #:project{:dir "/opt/scheduling/projects/ice-cream/db/",
                    :id :ice-cream,
                    :name "Ice Cream"}
          #:project{:dir "/opt/scheduling/projects/sur-key-blanks/db/",
                    :id :sur-key-blanks,
                    :name "SUR Key Blanks"}
          #:project{:dir "/opt/scheduling/projects/sur-cheesecake/db/",
                    :id :sur-cheesecake,
                    :name "SUR Cheesecake"}
          #:project{:dir
                    "/opt/scheduling/projects/sur-fuel-and-radiator-hose/db/",
                    :id :sur-fuel-and-radiator-hose,
                    :name "SUR Fuel And Radiator Hose"}
          #:project{:dir
                    "/opt/scheduling/projects/sur-ball-point-pens/db/",
                    :id :sur-ball-point-pens,
                    :name "SUR Ball Point Pens"}
          #:project{:dir
                    "/opt/scheduling/projects/sur-office-chairs/db/",
                    :id :sur-office-chairs,
                    :name "SUR Office Chairs"}
          #:project{:dir
                    "/opt/scheduling/projects/sur-sandwich-cookies/db/",
                    :id :sur-sandwich-cookies,
                    :name "SUR Sandwich Cookies"}
          #:project{:dir
                    "/opt/scheduling/projects/sur-mechanical-pencils/db/",
                    :id :sur-mechanical-pencils,
                    :name "SUR Mechanical Pencils"}
          #:project{:dir "/opt/scheduling/projects/sur-brake-pads/db/",
                    :id :sur-brake-pads,
                    :name "SUR Brake Pads"}
          #:project{:dir "/opt/scheduling/projects/sur-ice-melt/db/",
                    :id :sur-ice-melt,
                    :name "SUR Ice Melt"}
          #:project{:dir
                    "/opt/scheduling/projects/plate-glass-ork/db/",
                    :id :plate-glass-ork,
                    :name "Plate Glass Ork"}
          #:project{:dir
                    "/opt/scheduling/projects/sur-plate-glass/db/",
                    :id :sur-plate-glass,
                    :name "SUR Plate Glass"}
          #:project{:dir
                    "/opt/scheduling/projects/sur-commemorative-coins/db/",
                    :id :sur-commemorative-coins,
                    :name "SUR Commemorative Coins"}
          #:project{:dir
                    "/opt/scheduling/projects/sur-music-school/db/",
                    :id :sur-music-school,
                    :name "Music School"}
          #:project{:dir "/opt/scheduling/projects/test-me/db/",
                    :id :test-me,
                    :name "Test me"}
          #:project{:dir "data/projects/",
                    :id :snowboard-production-scheduling,
                    :name "Snowboards production scheduling"}]}

]
