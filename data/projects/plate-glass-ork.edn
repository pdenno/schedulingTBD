[
#:project{:agents
          [#:agent{:base-type :process-interview-agent,
                   :agent-type :shared-assistant,
                   :thread-id "thread_q1rJiz69z4FJfHRzmbc8bHY1",
                   :model-class :gpt,
                   :llm-provider :openai,
                   :assistant-id "asst_p9cnmj0rV7EYNMIeiqWm9ppf",
                   :id :process-interview-agent-openai,
                   :timestamp #inst "2025-03-05T15:05:59.648-00:00"}
           #:agent{:base-type :sur-plate-glass,
                   :agent-type :project,
                   :thread-id "thread_WJlieqcmQCiois9mr58SqM5r",
                   :model-class :gpt,
                   :llm-provider :openai,
                   :surrogate? true,
                   :assistant-id "asst_H2WCcMxVIcqJzo8JvHbwnMGS",
                   :id :sur-plate-glass-openai,
                   :expertise "plate glass",
                   :timestamp #inst "2025-03-05T15:06:39.496-00:00"}],
          :claims
          [#:claim{:string "(project-id :sur-plate-glass)"}
           #:claim{:string
                   "(project-name :sur-plate-glass \"SUR Plate Glass\")"}
           #:claim{:conversation-id :process,
                   :string "(surrogate :sur-plate-glass)"}
           #:claim{:conversation-id :process,
                   :question-type :process/warm-up,
                   :string
                   "(scheduling-challenge :sur-plate-glass :delivery-schedules)"}
           #:claim{:conversation-id :process,
                   :question-type :process/warm-up,
                   :string
                   "(scheduling-challenge :sur-plate-glass :product-variation)"}
           #:claim{:conversation-id :process,
                   :question-type :process/warm-up,
                   :string
                   "(scheduling-challenge :sur-plate-glass :raw-material-uncertainty)"}
           #:claim{:conversation-id :process,
                   :question-type :process/warm-up,
                   :string
                   "(principal-expertise  :sur-plate-glass \"Plate Glass\")"}
           #:claim{:conversation-id :process,
                   :question-type :process/warm-up,
                   :string
                   "(scheduling-challenge :sur-plate-glass :equipment-availability)"}
           #:claim{:conversation-id :process,
                   :question-type :process/warm-up,
                   :string
                   "(scheduling-challenge :sur-plate-glass :variation-in-demand)"}
           #:claim{:conversation-id :process,
                   :question-type :process/warm-up,
                   :string
                   "(scheduling-challenge :sur-plate-glass :process-variation)"}],
          :conversations
          [#:conversation{:id :process,
                          :interviewer-budget 1.0,
                          :messages
                          [#:message{:content
                                     "This is where we discuss how product gets made, or in the cases of services, how the service gets delivered.\nIt is also where we introduce MiniZinc, the <a href=\"terms/dsl\">domain specific language</a> (DSL)\nthrough which together we design a solution to your scheduling problem.\nYou can read more about <a href=\"about/process-conversation\">how this works</a>.",
                                     :from :system,
                                     :id 1,
                                     :tags [:conversation-intro],
                                     :time
                                     #inst "2025-03-05T15:06:37.184-00:00"}
                           #:message{:content
                                     "What are the products you make or the services you provide, and what is the scheduling challenge involving them? Please describe in a few sentences.",
                                     :from :system,
                                     :id 2,
                                     :tags [:query :warm-up],
                                     :time
                                     #inst "2025-03-05T15:06:51.378-00:00"}
                           #:message{:answers-question 2,
                                     :content
                                     "\nWe produce plate glass, which includes standard, tempered, laminated, and specialty glass products. The scheduling challenge lies in coordinating production processes like glass melting, shaping, annealing, and finishing while ensuring supply chain alignment for raw materials and accommodating varying customer lead times. Demand variability and equipment availability add additional complexity to the process.",
                                     :from :surrogate,
                                     :id 3,
                                     :tags [:response :warm-up],
                                     :time
                                     #inst "2025-03-05T15:06:51.397-00:00"}
                           #:message{:code
                                     "int : nProducts = 1;\nset of int: Product = 1..nProducts;\nenum Task = {millGrains, mashing, lautering, boiling, fermentation, conditioning, filtering, carbonation, bottlingCanning, packaging};\n% Durations are in units of hours and may be rounded.\n% If any of the durations are negative values, we had problems understanding; you should fix these by hand.\narray [Product, Task] of float: taskDuration = [|1.000, 1.500, 1.000, 1.000, 252.000, 60.000, 3.000, 24.000, 3.000, 3.000|];\n\nfloat : minTime = 0;\n% It shouldn't take longer than doing only one thing at a time.\nfloat : maxTime = sum (p in Product, t in Task) (taskDuration[p, t]);\n\n% We assume a task uses one major resource; resources are synonymous with tasks.\narray [Product, Task] of var minTime..maxTime: taskStarts; % 'var' means it is a decision variable.\narray [Product, Task] of var minTime..maxTime: taskEnds;\n\n% This is used in the constraint below.\npredicate no_overlap(var float:s1, float:d1, var float:s2, float:d2) = s1 + d1 <= s2 \\/ s2 + d2 <= s1;\n\n% Ensure that no two Products aren't using the same resource (task) at the same time.\nconstraint forall (t in Task)\n             (forall  (i,k in Product where i < k)\n                (no_overlap (taskStarts[i,t], taskDuration[i,t], taskStarts[k,t], taskDuration[k,t])));\n\n% We assume no tasks are running now, so the first task of some product can start now.\nconstraint exists (p in Product) (taskStarts[p, millGrains] = 0);\n\n% Starting some time in the past is not allowed.\nconstraint forall (p in Product where p > 1) (taskStarts[p, millGrains] > 0);\n\n% Every other task can start after the previous task ends.\nconstraint forall (p in Product) (taskEnds[p, millGrains] == taskStarts[p, mashing]);\nconstraint forall (p in Product) (taskEnds[p, mashing] == taskStarts[p, lautering]);\nconstraint forall (p in Product) (taskEnds[p, lautering] == taskStarts[p, boiling]);\nconstraint forall (p in Product) (taskEnds[p, boiling] == taskStarts[p, fermentation]);\nconstraint forall (p in Product) (taskEnds[p, fermentation] == taskStarts[p, conditioning]);\nconstraint forall (p in Product) (taskEnds[p, conditioning] == taskStarts[p, filtering]);\nconstraint forall (p in Product) (taskEnds[p, filtering] == taskStarts[p, carbonation]);\nconstraint forall (p in Product) (taskEnds[p, carbonation] == taskStarts[p, bottlingCanning]);\nconstraint forall (p in Product) (taskEnds[p, bottlingCanning] == taskStarts[p, packaging]);\n\n% A task ends taskDuration time units after it starts.\nconstraint forall (p in Product, t in Task) (taskEnds[p, t] == taskStarts[p, t] + taskDuration[p, t]);\n\n% Minimize time elapsed when the final task ends (maxspan).\nsolve minimize max (p in Product) (taskEnds[p, packaging]);",
                                     :content
                                     "Okay, we now know enough to get started on a MiniZinc solution. In the code pane (upper right of the app) we created a simplistic scheduling system.It only illustrates the idea of running one job through each of the tasks you mentioned(excepting any tasks that weren't part of making the product, those we'll deal with later.",
                                     :from :system,
                                     :id 4,
                                     :tags [:info-to-user :minizinc],
                                     :time
                                     #inst "2025-03-05T15:06:53.397-00:00"}]}
           #:conversation{:id :data,
                          :interviewer-budget 1.0,
                          :messages
                          [#:message{:content
                                     "This is where we ask you to talk about the data that drives your decisions (customer orders, due dates, worker schedules,... whatever).\nHere you can either upload actual data as spreadsheets, or we can talk about the kinds of information you use in general terms and\nwe can invent some similar data to run demonstrations.\nWhenever someone suggests that you upload information to them, you should be cautious.\nRead more about the intent of this conversation and the risks of uploading data <a href=\"about/uploading-data\">here</a>.",
                                     :from :system,
                                     :id 1,
                                     :tags [:conversation-intro],
                                     :time
                                     #inst "2025-03-05T15:06:37.184-00:00"}]}
           #:conversation{:id :resources,
                          :interviewer-budget 1.0,
                          :messages
                          [#:message{:content
                                     "This is typically the third conversation we'll have, after discussing process and data.\n(By the way, you can always go back to a conversation and add to it.)\nYou might have already mentioned the resources (people, machines) by which you make product or deliver services.\nHere we try to integrate this into the MiniZinc solution. Until we do that, we won't be able to generate realistic schedules.",
                                     :from :system,
                                     :id 1,
                                     :tags [:conversation-intro],
                                     :time
                                     #inst "2025-03-05T15:06:37.184-00:00"}]}
           #:conversation{:id :optimality,
                          :interviewer-budget 1.0,
                          :messages
                          [#:message{:content
                                     "This is where we discuss what you intend by 'good' and 'ideal' schedules. With these we formulate an objective and model it in MiniZinc. The MiniZinc solution can change substantially owing to this discussion, but owing to all the work we did to define requirements, we think it will be successful.",
                                     :from :system,
                                     :id 1,
                                     :tags [:conversation-intro],
                                     :time
                                     #inst "2025-03-05T15:06:37.184-00:00"}]}],
          :current-conversation :process,
          :id :plate-glass-ork,
          :name "Plate Glass Ork"}
]
