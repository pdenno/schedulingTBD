{:template/name "Minimal process hours"
 :template/description "A complete basic MiniZinc spec to run a single job through each task in serial order."
 :template/units :hours
 :template/blanks [:task-enum-list :task-duration-array :first-task-name :task-serial-constraints]
 :template/string
"int : nProducts = 1;
set of int: Product = 1..nProducts;
set of int: Hour = 0..365;
enum Task = ~A;
array [Product, Task] of int: taskDuration = ~A;

% We assume a task uses one major resource; resources are synonymous with tasks.
array [Product, Task] of var Hour: taskStarts; % 'var' means it is a decision variable.
array [Product, Task] of var Hour: taskEnds;

% We'll use this below to ensure a resource can only be used by one product at a time.
array [Task, Hour] of var Product: busyWith;

% We assume no tasks are running now, so the first task of the first (and only) job can start now.
constraint taskStarts[1, ~A] = 0;       % Product 1 starts immediately.
% Every other task can start after the previous task ends.
~A

% Next task must start right after previous task ends.

constraint forall (p in Product) (taskEnds[p, mill   ] == taskStarts[p, ferment]);
constraint forall (p in Product) (taskEnds[p, ferment] == taskStarts[p, bright]);

% A task ends taskDuration days after it starts.
constraint forall (p in Product, t in Task) (taskEnds[p, t] == taskStarts[p, t] + taskDuration[p, t]);

% A resource(task) can only be used with one product at a time.
constraint forall (t in Task, p in Product, d in Hour where d >= taskStarts[p,t] /\\ d <= taskEnds[p,t])
                    (busyWith[t,d] == p);

% Hours elapsed when the final task ends.
solve minimize sum (p in Product) (taskEnds[nProducts]);"}
