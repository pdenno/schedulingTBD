;;; This is a vector of 'proj' structure. See shop.clj.

;;; We operate on this structure -- or its DB equivalent (to be decided) -- by inserting calls to (!stop-plan) after calls
;;; to (!update-plan-state), which are also inserted as we go.


{:domain/name "pi"  ; This is appended to every :domain/element, so we keep it short.
 :domain/description "A planning domain to run an interview about the manufacturing processes that are the subject of scheduling"
 :domain/elems [;; (characterize-process ?proj)
                {:method/head (characterize-process ?proj)
                 :method/rhsides [{:method/case-name "from-scratch"
                                   :method/preconds [(not (ongoing-discussion ?proj))]
                                   :method/task-list [(!initial-question  ?proj)
                                                      (get-process-steps ?proj)
                                                      (get-wip ?proj)]}
                                  {:method/case-name "ongoing-discussion"
                                   :method/task-list [(!update-state ?proj)]}]}

                ;; (get-process-steps ?proj)
                {:method/head (get-process-steps ?proj)
                 :method/rhsides [{:method/case-name "well-known"
                                   :method/preconds [(well-known-process ?proj)]
                                   :method/task-list [(!yes-no-process-steps ?proj)]}
                                  {:method/case-name "unknown"
                                   :method/preconds [(unknown-process ?proj)]
                                   :method/task-list [(!query-process-steps ?proj)]}]}

                ;; (get-wip ?proj)
                {:method/head (get-wip ?proj)
                 :method/rhsides [{:method/case-name "ordinary"
                                   :method/preconds [(project-name ?proj)]
                                   :method/task-list [(!query-for-wip-spreadsheet ?proj)]}]}

                ;; (!initial-question ?proj)
                {:operator/head (!initial-question ?proj)
                 :operator/a-list [(stop-plan) (ongoing-discussion ?proj)]}

                ;; (!yes-no-process-steps ?proj)
                {:operator/head (!yes-no-process-steps ?proj)
                 :operator/preconds [(proj-name ?proj) (well-known-process ?proj)]
                 :operator/a-list [(have-process-steps ?proj)]}

                ;; (!query-process-steps ?proj)
                {:operator/head (!query-process-steps ?proj)
                 :operator/preconds [(proj-name ?proj) (system-model flow)]
                 :operator/a-list [(have-process-steps ?proj)]}

                ;; (!yes-no-process-durations ?proj)
                {:operator/head (!yes-no-process-durations ?proj)
                 :operator/preconds [(proj-name ?proj) (well-known-process ?proj)]
                 :operator/a-list [(have-process-durs ?proj)]}

                ;; (!query-for-wip-spreadsheet ?proj)
                {:operator/head (!query-for-wip-spreadsheet ?proj)
                 :operator/preconds [(proj-name ?proj) (have-process-steps ?proj)]
                 :operator/a-list [(have-wip ?proj)]}

                ;; (!update-plan-state ?proj)
                {:operator/head (!update-state ?proj)
                 :operator/a-list [(stop-plan)]}

                ;; (:- (same ?x ?x) ())
                {:axiom/head (same ?x ?x)}

                ;; (:- (different ?x ?y) ((not (same ?x ?y))))
                {:axiom/head (different ?x ?y)
                 :axiom/rhsides [{:axiom/rhs ((not (same ?x ?y)))}]}]}
