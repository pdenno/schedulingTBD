;;; After updating this:
;;; (sutil/register-planning-domain :process-interview (-> "data/planning-domains/process-interview.edn" slurp edn/read-string))

{:domain/id :process-interview
 :domain/conversation :process
 :domain/description "A planning domain to run an interview about the manufacturing processes that are the subject of scheduling"
 :domain/elems [{:method/head (characterize-process ?p)
                 :method/rhsides [{:method/preconds [(proj-id ?p)]
                                   :method/task-list [(describe-challenge ?p)
                                                      (classify-production-type ?p)
                                                      (analyze-process ?p)
                                                      (verify-process ?p)]}]}

                {:method/head (describe-challenge ?p)
                 :method/rhsides [{:method/preconds [(proj-id ?p)]
                                   :method/task-list [(!describe-challenge ?p)
                                                      (remark-raw-material-challenge? ?p)]}]}

                {:method/head (remark-raw-material-challenge? ?p) ; ToDo: This is even valuable for a parallel expert. "Say something."
                 :method/rhsides [{:method/case "cited"
                                   :method/preconds [(cites-raw-material-challenge ?p)]
                                   :method/task-list [(!remark-raw-material-challenge ?p)]}
                                  {:method/case "not-cited"
                                   :method/preconds [(not (cites-raw-material-challenge ?p))]
                                   :method/task-list [(!do-nothing)]}]}

                {:operator/head (!do-nothing)}             ; Special purpose
                {:operator/head (!describe-challenge ?p)}  ; This is first question of process interview.
                {:operator/head (!remark-raw-material-challenge ?p)}

;;; ------------ classify-production-type (parallel expert stuff) -------------------
                {:method/head (classify-production-type ?p)
                 :method/rhsides [{:method/preconds [(proj-id ?p)]
                                   :method/task-list [(!describe-process ?p)
                                                      (!query-product-or-service ?p)
                                                      (!query-production-mode ?p)
                                                      (!query-activity-location-type ?p)
                                                      (!query-shop-type ?p)]}]}

                {:operator/head (!describe-process ?p)}  ; This is parallel expert warm up.
                {:operator/head (!query-product-or-service ?p)}
                {:operator/head (!query-production-mode ?p)}
                {:operator/head (!query-activity-location-type ?p)}
                {:operator/head (!query-shop-type ?p)}

;;; ------------------------- analyze-process -------------------------------------
                {:method/head (analyze-process ?p)
                 :method/rhsides [{:method/preconds [(proj-id ?p)]
                                   :method/task-list [(!query-process-steps ?p)
                                                      (!query-process-durs ?p)]}]}

                {:operator/head (!query-process-steps ?p)  ; This is parallel expert warm up.
                 :operator/preconds [(flow-shop ?p)]
                 :operator/a-list [(done !query-process-steps ?p)]} ; <================ These are going to be automatic.

                {:operator/head (!query-process-durs ?p)
                 :operator/preconds [(flow-shop ?p)]
                 :operator/a-list [(done !query-process-durs ?p)]} ; <================ These are going to be automatic.

;;; ------------------------- verify-process --------------------------------------
                {:method/head (verify-process ?p)
                 :method/rhsides [{:method/preconds [(proj-id ?p)]
                                   :method/task-list [(!do-nothing)]}]} ; NYI

;;; ------------------------- axioms  -------------------------------------
                {:axiom/head (same ?x ?x)}

                ;; (:- (different ?x ?y) ((not (same ?x ?y))))
                {:axiom/head (different ?x ?y)
                 :axiom/rhsides [{:axiom/rhs ((not (same ?x ?y)))}]}


                {:axiom/head (done analyze-process ?p)
                 :axiom/rhsides [{:axiom/rhs
                                  ((done !describe-challenge ?p)
                                   (done !describe-process ?p)
                                   (done !query-product-or-service? ?p)
                                   (done !query-production-pattern ?p)
                                   (done !query-activity-location-type ?p)
                                   (done !query-shop-type ?p))}]}]}
